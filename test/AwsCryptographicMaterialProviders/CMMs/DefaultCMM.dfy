// Warning: Values of type StandardLibrary.UInt.uint8 will be assigned a default value of type int, which may or may not match the associated condition
// Warning: Values of type StandardLibrary.UInt.uint16 will be assigned a default value of type int, which may or may not match the associated condition
// Warning: Values of type StandardLibrary.UInt.uint32 will be assigned a default value of type int, which may or may not match the associated condition
// Warning: Values of type StandardLibrary.UInt.uint64 will be assigned a default value of type int, which may or may not match the associated condition
// Warning: Values of type StandardLibrary.UInt.int32 will be assigned a default value of type int, which may or may not match the associated condition
// Warning: Values of type StandardLibrary.UInt.int64 will be assigned a default value of type int, which may or may not match the associated condition
// Values of type StandardLibrary.UInt.posInt64 will be assigned the default value of 1
// Warning: Values of type StandardLibrary.UInt.seq16 will be assigned a default value of type seq<T>, which may or may not match the associated condition
// Warning: Values of type StandardLibrary.UInt.Uint8Seq16 will be assigned a default value of type seq16<uint8>, which may or may not match the associated condition
// Warning: Values of type StandardLibrary.UInt.seq32 will be assigned a default value of type seq<T>, which may or may not match the associated condition
// Warning: Values of type StandardLibrary.UInt.Uint8Seq32 will be assigned a default value of type seq32<uint8>, which may or may not match the associated condition
// Warning: Values of type StandardLibrary.UInt.seq64 will be assigned a default value of type seq<T>, which may or may not match the associated condition
// Warning: Values of type StandardLibrary.UInt.Uint8Seq64 will be assigned a default value of type seq64<uint8>, which may or may not match the associated condition
// Warning: Values of type Base64.index will be assigned a default value of type int, which may or may not match the associated condition
// Warning: Values of type Base64.uint24 will be assigned a default value of type int, which may or may not match the associated condition
// Values of type UTF8.ValidUTF8Bytes will be assigned the default value of []
// Values of type AESEncryption.KeyLength will be assigned the default value of 32
// Values of type AESEncryption.TagLength will be assigned the default value of 16
// Values of type AESEncryption.IVLength will be assigned the default value of 12
// Values of type MaterialProviders.Materials.DecryptionMaterialsPendingPlaintextDataKey will be assigned the default value of Crypto.DecryptionMaterials(algorithmSuiteId := Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_NO_KDF, encryptionContext := map[], plaintextDataKey := Option.None, verificationKey := Option.None)
// Values of type MaterialProviders.Materials.SealedDecryptionMaterials will be assigned the default value of Crypto.DecryptionMaterials(algorithmSuiteId := Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_NO_KDF, encryptionContext := map[], plaintextDataKey := Option.Some([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), verificationKey := Option.None)
// Values of type MaterialProviders.AlgorithmSuites.KeyDerivationAlgorithm will be assigned the default value of DerivationAlgorithm.IDENTITY
// Values of type MaterialProviders.AlgorithmSuites.CommitmentDerivationAlgorithm will be assigned the default value of DerivationAlgorithm.None
// Values of type MaterialProviders.AlgorithmSuites.AlgorithmSuite will be assigned the default value of AlgorithmSuiteInfo(messageVersion := 1, id := Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_NO_KDF, encrypt := AESEncryption.AES_GCM(keyLength := 16, tagLength := 16, ivLength := 12), kdf := DerivationAlgorithm.IDENTITY, commitment := DerivationAlgorithm.None, signature := SignatureAlgorithm.None)
// Warning: Values of type Aws.Crypto.KmsKeyId will be assigned a default value of type string, which may or may not match the associated condition
// Warning: Values of type Aws.Crypto.KmsKeyIdList will be assigned a default value of type seq<KmsKeyId>, which may or may not match the associated condition
// Warning: Values of type Aws.Crypto.GrantToken will be assigned a default value of type string, which may or may not match the associated condition
// Warning: Values of type Aws.Crypto.GrantTokenList will be assigned a default value of type seq<GrantToken>, which may or may not match the associated condition
// Warning: Values of type Aws.Crypto.Region will be assigned a default value of type string, which may or may not match the associated condition
// Warning: Values of type Aws.Crypto.RegionList will be assigned a default value of type seq<Region>, which may or may not match the associated condition
// Warning: Values of type Aws.Crypto.AccountId will be assigned a default value of type string, which may or may not match the associated condition
// Warning: Values of type Aws.Crypto.AccountIdList will be assigned a default value of type seq<AccountId>, which may or may not match the associated condition
// Warning: Values of type Aws.Crypto.EncryptionContext will be assigned a default value of type map<ValidUTF8Bytes, ValidUTF8Bytes>, which may or may not match the associated condition
// Warning: Values of type Aws.Crypto.EncryptedDataKeyList will be assigned a default value of type seq<EncryptedDataKey>, which may or may not match the associated condition
// Warning: Values of type Com.Amazonaws.Kms.AliasList will be assigned a default value of type seq<AliasListEntry>, which may or may not match the associated condition
// Values of type Com.Amazonaws.Kms.AliasNameType will be assigned the default value of "a"
// Values of type Com.Amazonaws.Kms.ArnType will be assigned the default value of "aaaaaaaaaaaaaaaaaaaa"
// Warning: Values of type Com.Amazonaws.Kms.AWSAccountIdType will be assigned a default value of type string, which may or may not match the associated condition
// Warning: Values of type Com.Amazonaws.Kms.BooleanType will be assigned a default value of type bool, which may or may not match the associated condition
// Values of type Com.Amazonaws.Kms.CiphertextType will be assigned the default value of [0 as uint8]
// Values of type Com.Amazonaws.Kms.CloudHsmClusterIdType will be assigned the default value of "aaaaaaaaaaaaaaaaaaa"
// Values of type Com.Amazonaws.Kms.CustomKeyStoreIdType will be assigned the default value of "a"
// Values of type Com.Amazonaws.Kms.CustomKeyStoreNameType will be assigned the default value of "a"
// Warning: Values of type Com.Amazonaws.Kms.CustomKeyStoresList will be assigned a default value of type seq<CustomKeyStoresListEntry>, which may or may not match the associated condition
// Values of type Com.Amazonaws.Kms.DescriptionType will be assigned the default value of ""
// Warning: Values of type Com.Amazonaws.Kms.EncryptionAlgorithmSpecList will be assigned a default value of type seq<EncryptionAlgorithmSpec>, which may or may not match the associated condition
// Warning: Values of type Com.Amazonaws.Kms.EncryptionContextKey will be assigned a default value of type string, which may or may not match the associated condition
// Warning: Values of type Com.Amazonaws.Kms.EncryptionContextType will be assigned a default value of type map<EncryptionContextKey, EncryptionContextValue>, which may or may not match the associated condition
// Warning: Values of type Com.Amazonaws.Kms.EncryptionContextValue will be assigned a default value of type string, which may or may not match the associated condition
// Warning: Values of type Com.Amazonaws.Kms.ErrorMessageType will be assigned a default value of type string, which may or may not match the associated condition
// Values of type Com.Amazonaws.Kms.GrantIdType will be assigned the default value of "a"
// Warning: Values of type Com.Amazonaws.Kms.GrantList will be assigned a default value of type seq<GrantListEntry>, which may or may not match the associated condition
// Values of type Com.Amazonaws.Kms.GrantNameType will be assigned the default value of "a"
// Warning: Values of type Com.Amazonaws.Kms.GrantOperationList will be assigned a default value of type seq<GrantOperation>, which may or may not match the associated condition
// Values of type Com.Amazonaws.Kms.GrantTokenList will be assigned the default value of []
// Values of type Com.Amazonaws.Kms.GrantTokenType will be assigned the default value of "a"
// Values of type Com.Amazonaws.Kms.KeyIdType will be assigned the default value of "a"
// Warning: Values of type Com.Amazonaws.Kms.KeyList will be assigned a default value of type seq<KeyListEntry>, which may or may not match the associated condition
// Values of type Com.Amazonaws.Kms.KeyStorePasswordType will be assigned the default value of "1234567"
// Values of type Com.Amazonaws.Kms.LimitType will be assigned the default value of 1 as int32
// Values of type Com.Amazonaws.Kms.MarkerType will be assigned the default value of "a"
// Warning: Values of type Com.Amazonaws.Kms.MultiRegionKeyList will be assigned a default value of type seq<MultiRegionKey>, which may or may not match the associated condition
// Warning: Values of type Com.Amazonaws.Kms.NullableBooleanType will be assigned a default value of type bool, which may or may not match the associated condition
// Values of type Com.Amazonaws.Kms.NumberOfBytesType will be assigned the default value of 1 as int32
// Values of type Com.Amazonaws.Kms.PendingWindowInDaysType will be assigned the default value of 1 as int32
// Values of type Com.Amazonaws.Kms.PlaintextType will be assigned the default value of [0 as uint8]
// Warning: Values of type Com.Amazonaws.Kms.PolicyNameList will be assigned a default value of type seq<PolicyNameType>, which may or may not match the associated condition
// Values of type Com.Amazonaws.Kms.PolicyNameType will be assigned the default value of "a"
// Values of type Com.Amazonaws.Kms.PolicyType will be assigned the default value of "a"
// Values of type Com.Amazonaws.Kms.PrincipalIdType will be assigned the default value of "a"
// Values of type Com.Amazonaws.Kms.PublicKeyType will be assigned the default value of [0 as uint8]
// Values of type Com.Amazonaws.Kms.RegionType will be assigned the default value of "a"
// Warning: Values of type Com.Amazonaws.Kms.SigningAlgorithmSpecList will be assigned a default value of type seq<SigningAlgorithmSpec>, which may or may not match the associated condition
// Warning: Values of type Com.Amazonaws.Kms.TagKeyList will be assigned a default value of type seq<TagKeyType>, which may or may not match the associated condition
// Values of type Com.Amazonaws.Kms.TagKeyType will be assigned the default value of "a"
// Warning: Values of type Com.Amazonaws.Kms.TagList will be assigned a default value of type seq<Tag>, which may or may not match the associated condition
// Values of type Com.Amazonaws.Kms.TagValueType will be assigned the default value of ""
// Values of type Com.Amazonaws.Kms.TrustAnchorCertificateType will be assigned the default value of "a"
include "../../..//src/AwsCryptographicMaterialProviders/CMMs/DefaultCMM.dfy"
module srcAwsCryptographicMaterialProvidersCMMsDefaultCMMdfyUnitTests {
import StandardLibrary
import StandardLibrary.UInt
import Wrappers
import Base64
import UTF8
import HMAC
import Signature
import AESEncryption
import Defaults
import MaterialProviders
import MaterialProviders.DefaultCMM
import MaterialProviders.Materials
import MaterialProviders.AlgorithmSuites
import MaterialProviders.CMM
import MaterialProviders.Commitment
import Aws
import Aws.Crypto
import Com
import Com.Amazonaws
import Com.Amazonaws.Kms
// Warning: Values of type StandardLibrary.UInt.uint8 will be assigned a default value of type int, which may or may not match the associated condition
// Warning: Values of type StandardLibrary.UInt.uint16 will be assigned a default value of type int, which may or may not match the associated condition
// Warning: Values of type StandardLibrary.UInt.uint32 will be assigned a default value of type int, which may or may not match the associated condition
// Warning: Values of type StandardLibrary.UInt.uint64 will be assigned a default value of type int, which may or may not match the associated condition
// Warning: Values of type StandardLibrary.UInt.int32 will be assigned a default value of type int, which may or may not match the associated condition
// Warning: Values of type StandardLibrary.UInt.int64 will be assigned a default value of type int, which may or may not match the associated condition
// Values of type StandardLibrary.UInt.posInt64 will be assigned the default value of 1
// Warning: Values of type StandardLibrary.UInt.seq16 will be assigned a default value of type seq<T>, which may or may not match the associated condition
// Warning: Values of type StandardLibrary.UInt.Uint8Seq16 will be assigned a default value of type seq16<uint8>, which may or may not match the associated condition
// Warning: Values of type StandardLibrary.UInt.seq32 will be assigned a default value of type seq<T>, which may or may not match the associated condition
// Warning: Values of type StandardLibrary.UInt.Uint8Seq32 will be assigned a default value of type seq32<uint8>, which may or may not match the associated condition
// Warning: Values of type StandardLibrary.UInt.seq64 will be assigned a default value of type seq<T>, which may or may not match the associated condition
// Warning: Values of type StandardLibrary.UInt.Uint8Seq64 will be assigned a default value of type seq64<uint8>, which may or may not match the associated condition
// Warning: Values of type Base64.index will be assigned a default value of type int, which may or may not match the associated condition
// Warning: Values of type Base64.uint24 will be assigned a default value of type int, which may or may not match the associated condition
// Values of type UTF8.ValidUTF8Bytes will be assigned the default value of []
// Values of type AESEncryption.KeyLength will be assigned the default value of 32
// Values of type AESEncryption.TagLength will be assigned the default value of 16
// Values of type AESEncryption.IVLength will be assigned the default value of 12
// Values of type MaterialProviders.Materials.DecryptionMaterialsPendingPlaintextDataKey will be assigned the default value of Crypto.DecryptionMaterials(algorithmSuiteId := Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_NO_KDF, encryptionContext := map[], plaintextDataKey := Option.None, verificationKey := Option.None)
// Values of type MaterialProviders.Materials.SealedDecryptionMaterials will be assigned the default value of Crypto.DecryptionMaterials(algorithmSuiteId := Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_NO_KDF, encryptionContext := map[], plaintextDataKey := Option.Some([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), verificationKey := Option.None)
// Values of type MaterialProviders.AlgorithmSuites.KeyDerivationAlgorithm will be assigned the default value of DerivationAlgorithm.IDENTITY
// Values of type MaterialProviders.AlgorithmSuites.CommitmentDerivationAlgorithm will be assigned the default value of DerivationAlgorithm.None
// Values of type MaterialProviders.AlgorithmSuites.AlgorithmSuite will be assigned the default value of AlgorithmSuiteInfo(messageVersion := 1, id := Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_NO_KDF, encrypt := AESEncryption.AES_GCM(keyLength := 16, tagLength := 16, ivLength := 12), kdf := DerivationAlgorithm.IDENTITY, commitment := DerivationAlgorithm.None, signature := SignatureAlgorithm.None)
// Warning: Values of type Aws.Crypto.KmsKeyId will be assigned a default value of type string, which may or may not match the associated condition
// Warning: Values of type Aws.Crypto.KmsKeyIdList will be assigned a default value of type seq<KmsKeyId>, which may or may not match the associated condition
// Warning: Values of type Aws.Crypto.GrantToken will be assigned a default value of type string, which may or may not match the associated condition
// Warning: Values of type Aws.Crypto.GrantTokenList will be assigned a default value of type seq<GrantToken>, which may or may not match the associated condition
// Warning: Values of type Aws.Crypto.Region will be assigned a default value of type string, which may or may not match the associated condition
// Warning: Values of type Aws.Crypto.RegionList will be assigned a default value of type seq<Region>, which may or may not match the associated condition
// Warning: Values of type Aws.Crypto.AccountId will be assigned a default value of type string, which may or may not match the associated condition
// Warning: Values of type Aws.Crypto.AccountIdList will be assigned a default value of type seq<AccountId>, which may or may not match the associated condition
// Warning: Values of type Aws.Crypto.EncryptionContext will be assigned a default value of type map<ValidUTF8Bytes, ValidUTF8Bytes>, which may or may not match the associated condition
// Warning: Values of type Aws.Crypto.EncryptedDataKeyList will be assigned a default value of type seq<EncryptedDataKey>, which may or may not match the associated condition
// Warning: Values of type Com.Amazonaws.Kms.AliasList will be assigned a default value of type seq<AliasListEntry>, which may or may not match the associated condition
// Values of type Com.Amazonaws.Kms.AliasNameType will be assigned the default value of "a"
// Values of type Com.Amazonaws.Kms.ArnType will be assigned the default value of "aaaaaaaaaaaaaaaaaaaa"
// Warning: Values of type Com.Amazonaws.Kms.AWSAccountIdType will be assigned a default value of type string, which may or may not match the associated condition
// Warning: Values of type Com.Amazonaws.Kms.BooleanType will be assigned a default value of type bool, which may or may not match the associated condition
// Values of type Com.Amazonaws.Kms.CiphertextType will be assigned the default value of [0 as uint8]
// Values of type Com.Amazonaws.Kms.CloudHsmClusterIdType will be assigned the default value of "aaaaaaaaaaaaaaaaaaa"
// Values of type Com.Amazonaws.Kms.CustomKeyStoreIdType will be assigned the default value of "a"
// Values of type Com.Amazonaws.Kms.CustomKeyStoreNameType will be assigned the default value of "a"
// Warning: Values of type Com.Amazonaws.Kms.CustomKeyStoresList will be assigned a default value of type seq<CustomKeyStoresListEntry>, which may or may not match the associated condition
// Values of type Com.Amazonaws.Kms.DescriptionType will be assigned the default value of ""
// Warning: Values of type Com.Amazonaws.Kms.EncryptionAlgorithmSpecList will be assigned a default value of type seq<EncryptionAlgorithmSpec>, which may or may not match the associated condition
// Warning: Values of type Com.Amazonaws.Kms.EncryptionContextKey will be assigned a default value of type string, which may or may not match the associated condition
// Warning: Values of type Com.Amazonaws.Kms.EncryptionContextType will be assigned a default value of type map<EncryptionContextKey, EncryptionContextValue>, which may or may not match the associated condition
// Warning: Values of type Com.Amazonaws.Kms.EncryptionContextValue will be assigned a default value of type string, which may or may not match the associated condition
// Warning: Values of type Com.Amazonaws.Kms.ErrorMessageType will be assigned a default value of type string, which may or may not match the associated condition
// Values of type Com.Amazonaws.Kms.GrantIdType will be assigned the default value of "a"
// Warning: Values of type Com.Amazonaws.Kms.GrantList will be assigned a default value of type seq<GrantListEntry>, which may or may not match the associated condition
// Values of type Com.Amazonaws.Kms.GrantNameType will be assigned the default value of "a"
// Warning: Values of type Com.Amazonaws.Kms.GrantOperationList will be assigned a default value of type seq<GrantOperation>, which may or may not match the associated condition
// Values of type Com.Amazonaws.Kms.GrantTokenList will be assigned the default value of []
// Values of type Com.Amazonaws.Kms.GrantTokenType will be assigned the default value of "a"
// Values of type Com.Amazonaws.Kms.KeyIdType will be assigned the default value of "a"
// Warning: Values of type Com.Amazonaws.Kms.KeyList will be assigned a default value of type seq<KeyListEntry>, which may or may not match the associated condition
// Values of type Com.Amazonaws.Kms.KeyStorePasswordType will be assigned the default value of "1234567"
// Values of type Com.Amazonaws.Kms.LimitType will be assigned the default value of 1 as int32
// Values of type Com.Amazonaws.Kms.MarkerType will be assigned the default value of "a"
// Warning: Values of type Com.Amazonaws.Kms.MultiRegionKeyList will be assigned a default value of type seq<MultiRegionKey>, which may or may not match the associated condition
// Warning: Values of type Com.Amazonaws.Kms.NullableBooleanType will be assigned a default value of type bool, which may or may not match the associated condition
// Values of type Com.Amazonaws.Kms.NumberOfBytesType will be assigned the default value of 1 as int32
// Values of type Com.Amazonaws.Kms.PendingWindowInDaysType will be assigned the default value of 1 as int32
// Values of type Com.Amazonaws.Kms.PlaintextType will be assigned the default value of [0 as uint8]
// Warning: Values of type Com.Amazonaws.Kms.PolicyNameList will be assigned a default value of type seq<PolicyNameType>, which may or may not match the associated condition
// Values of type Com.Amazonaws.Kms.PolicyNameType will be assigned the default value of "a"
// Values of type Com.Amazonaws.Kms.PolicyType will be assigned the default value of "a"
// Values of type Com.Amazonaws.Kms.PrincipalIdType will be assigned the default value of "a"
// Values of type Com.Amazonaws.Kms.PublicKeyType will be assigned the default value of [0 as uint8]
// Values of type Com.Amazonaws.Kms.RegionType will be assigned the default value of "a"
// Warning: Values of type Com.Amazonaws.Kms.SigningAlgorithmSpecList will be assigned a default value of type seq<SigningAlgorithmSpec>, which may or may not match the associated condition
// Warning: Values of type Com.Amazonaws.Kms.TagKeyList will be assigned a default value of type seq<TagKeyType>, which may or may not match the associated condition
// Values of type Com.Amazonaws.Kms.TagKeyType will be assigned the default value of "a"
// Warning: Values of type Com.Amazonaws.Kms.TagList will be assigned a default value of type seq<Tag>, which may or may not match the associated condition
// Values of type Com.Amazonaws.Kms.TagValueType will be assigned the default value of ""
// Values of type Com.Amazonaws.Kms.TrustAnchorCertificateType will be assigned the default value of "a"
// Warning: Values of type StandardLibrary.UInt.uint8 will be assigned a default value of type int, which may or may not match the associated condition
// Warning: Values of type StandardLibrary.UInt.uint16 will be assigned a default value of type int, which may or may not match the associated condition
// Warning: Values of type StandardLibrary.UInt.uint32 will be assigned a default value of type int, which may or may not match the associated condition
// Warning: Values of type StandardLibrary.UInt.uint64 will be assigned a default value of type int, which may or may not match the associated condition
// Warning: Values of type StandardLibrary.UInt.int32 will be assigned a default value of type int, which may or may not match the associated condition
// Warning: Values of type StandardLibrary.UInt.int64 will be assigned a default value of type int, which may or may not match the associated condition
// Values of type StandardLibrary.UInt.posInt64 will be assigned the default value of 1
// Warning: Values of type StandardLibrary.UInt.seq16 will be assigned a default value of type seq<T>, which may or may not match the associated condition
// Warning: Values of type StandardLibrary.UInt.Uint8Seq16 will be assigned a default value of type seq16<uint8>, which may or may not match the associated condition
// Warning: Values of type StandardLibrary.UInt.seq32 will be assigned a default value of type seq<T>, which may or may not match the associated condition
// Warning: Values of type StandardLibrary.UInt.Uint8Seq32 will be assigned a default value of type seq32<uint8>, which may or may not match the associated condition
// Warning: Values of type StandardLibrary.UInt.seq64 will be assigned a default value of type seq<T>, which may or may not match the associated condition
// Warning: Values of type StandardLibrary.UInt.Uint8Seq64 will be assigned a default value of type seq64<uint8>, which may or may not match the associated condition
// Warning: Values of type Base64.index will be assigned a default value of type int, which may or may not match the associated condition
// Warning: Values of type Base64.uint24 will be assigned a default value of type int, which may or may not match the associated condition
// Values of type UTF8.ValidUTF8Bytes will be assigned the default value of []
// Values of type AESEncryption.KeyLength will be assigned the default value of 32
// Values of type AESEncryption.TagLength will be assigned the default value of 16
// Values of type AESEncryption.IVLength will be assigned the default value of 12
// Values of type MaterialProviders.Materials.DecryptionMaterialsPendingPlaintextDataKey will be assigned the default value of Crypto.DecryptionMaterials(algorithmSuiteId := Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_NO_KDF, encryptionContext := map[], plaintextDataKey := Option.None, verificationKey := Option.None)
// Values of type MaterialProviders.Materials.SealedDecryptionMaterials will be assigned the default value of Crypto.DecryptionMaterials(algorithmSuiteId := Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_NO_KDF, encryptionContext := map[], plaintextDataKey := Option.Some([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), verificationKey := Option.None)
// Values of type MaterialProviders.AlgorithmSuites.KeyDerivationAlgorithm will be assigned the default value of DerivationAlgorithm.IDENTITY
// Values of type MaterialProviders.AlgorithmSuites.CommitmentDerivationAlgorithm will be assigned the default value of DerivationAlgorithm.None
// Values of type MaterialProviders.AlgorithmSuites.AlgorithmSuite will be assigned the default value of AlgorithmSuiteInfo(messageVersion := 1, id := Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_NO_KDF, encrypt := AESEncryption.AES_GCM(keyLength := 16, tagLength := 16, ivLength := 12), kdf := DerivationAlgorithm.IDENTITY, commitment := DerivationAlgorithm.None, signature := SignatureAlgorithm.None)
// Warning: Values of type Aws.Crypto.KmsKeyId will be assigned a default value of type string, which may or may not match the associated condition
// Warning: Values of type Aws.Crypto.KmsKeyIdList will be assigned a default value of type seq<KmsKeyId>, which may or may not match the associated condition
// Warning: Values of type Aws.Crypto.GrantToken will be assigned a default value of type string, which may or may not match the associated condition
// Warning: Values of type Aws.Crypto.GrantTokenList will be assigned a default value of type seq<GrantToken>, which may or may not match the associated condition
// Warning: Values of type Aws.Crypto.Region will be assigned a default value of type string, which may or may not match the associated condition
// Warning: Values of type Aws.Crypto.RegionList will be assigned a default value of type seq<Region>, which may or may not match the associated condition
// Warning: Values of type Aws.Crypto.AccountId will be assigned a default value of type string, which may or may not match the associated condition
// Warning: Values of type Aws.Crypto.AccountIdList will be assigned a default value of type seq<AccountId>, which may or may not match the associated condition
// Warning: Values of type Aws.Crypto.EncryptionContext will be assigned a default value of type map<ValidUTF8Bytes, ValidUTF8Bytes>, which may or may not match the associated condition
// Warning: Values of type Aws.Crypto.EncryptedDataKeyList will be assigned a default value of type seq<EncryptedDataKey>, which may or may not match the associated condition
// Warning: Values of type Com.Amazonaws.Kms.AliasList will be assigned a default value of type seq<AliasListEntry>, which may or may not match the associated condition
// Values of type Com.Amazonaws.Kms.AliasNameType will be assigned the default value of "a"
// Values of type Com.Amazonaws.Kms.ArnType will be assigned the default value of "aaaaaaaaaaaaaaaaaaaa"
// Warning: Values of type Com.Amazonaws.Kms.AWSAccountIdType will be assigned a default value of type string, which may or may not match the associated condition
// Warning: Values of type Com.Amazonaws.Kms.BooleanType will be assigned a default value of type bool, which may or may not match the associated condition
// Values of type Com.Amazonaws.Kms.CiphertextType will be assigned the default value of [0 as uint8]
// Values of type Com.Amazonaws.Kms.CloudHsmClusterIdType will be assigned the default value of "aaaaaaaaaaaaaaaaaaa"
// Values of type Com.Amazonaws.Kms.CustomKeyStoreIdType will be assigned the default value of "a"
// Values of type Com.Amazonaws.Kms.CustomKeyStoreNameType will be assigned the default value of "a"
// Warning: Values of type Com.Amazonaws.Kms.CustomKeyStoresList will be assigned a default value of type seq<CustomKeyStoresListEntry>, which may or may not match the associated condition
// Values of type Com.Amazonaws.Kms.DescriptionType will be assigned the default value of ""
// Warning: Values of type Com.Amazonaws.Kms.EncryptionAlgorithmSpecList will be assigned a default value of type seq<EncryptionAlgorithmSpec>, which may or may not match the associated condition
// Warning: Values of type Com.Amazonaws.Kms.EncryptionContextKey will be assigned a default value of type string, which may or may not match the associated condition
// Warning: Values of type Com.Amazonaws.Kms.EncryptionContextType will be assigned a default value of type map<EncryptionContextKey, EncryptionContextValue>, which may or may not match the associated condition
// Warning: Values of type Com.Amazonaws.Kms.EncryptionContextValue will be assigned a default value of type string, which may or may not match the associated condition
// Warning: Values of type Com.Amazonaws.Kms.ErrorMessageType will be assigned a default value of type string, which may or may not match the associated condition
// Values of type Com.Amazonaws.Kms.GrantIdType will be assigned the default value of "a"
// Warning: Values of type Com.Amazonaws.Kms.GrantList will be assigned a default value of type seq<GrantListEntry>, which may or may not match the associated condition
// Values of type Com.Amazonaws.Kms.GrantNameType will be assigned the default value of "a"
// Warning: Values of type Com.Amazonaws.Kms.GrantOperationList will be assigned a default value of type seq<GrantOperation>, which may or may not match the associated condition
// Values of type Com.Amazonaws.Kms.GrantTokenList will be assigned the default value of []
// Values of type Com.Amazonaws.Kms.GrantTokenType will be assigned the default value of "a"
// Values of type Com.Amazonaws.Kms.KeyIdType will be assigned the default value of "a"
// Warning: Values of type Com.Amazonaws.Kms.KeyList will be assigned a default value of type seq<KeyListEntry>, which may or may not match the associated condition
// Values of type Com.Amazonaws.Kms.KeyStorePasswordType will be assigned the default value of "1234567"
// Values of type Com.Amazonaws.Kms.LimitType will be assigned the default value of 1 as int32
// Values of type Com.Amazonaws.Kms.MarkerType will be assigned the default value of "a"
// Warning: Values of type Com.Amazonaws.Kms.MultiRegionKeyList will be assigned a default value of type seq<MultiRegionKey>, which may or may not match the associated condition
// Warning: Values of type Com.Amazonaws.Kms.NullableBooleanType will be assigned a default value of type bool, which may or may not match the associated condition
// Values of type Com.Amazonaws.Kms.NumberOfBytesType will be assigned the default value of 1 as int32
// Values of type Com.Amazonaws.Kms.PendingWindowInDaysType will be assigned the default value of 1 as int32
// Values of type Com.Amazonaws.Kms.PlaintextType will be assigned the default value of [0 as uint8]
// Warning: Values of type Com.Amazonaws.Kms.PolicyNameList will be assigned a default value of type seq<PolicyNameType>, which may or may not match the associated condition
// Values of type Com.Amazonaws.Kms.PolicyNameType will be assigned the default value of "a"
// Values of type Com.Amazonaws.Kms.PolicyType will be assigned the default value of "a"
// Values of type Com.Amazonaws.Kms.PrincipalIdType will be assigned the default value of "a"
// Values of type Com.Amazonaws.Kms.PublicKeyType will be assigned the default value of [0 as uint8]
// Values of type Com.Amazonaws.Kms.RegionType will be assigned the default value of "a"
// Warning: Values of type Com.Amazonaws.Kms.SigningAlgorithmSpecList will be assigned a default value of type seq<SigningAlgorithmSpec>, which may or may not match the associated condition
// Warning: Values of type Com.Amazonaws.Kms.TagKeyList will be assigned a default value of type seq<TagKeyType>, which may or may not match the associated condition
// Values of type Com.Amazonaws.Kms.TagKeyType will be assigned the default value of "a"
// Warning: Values of type Com.Amazonaws.Kms.TagList will be assigned a default value of type seq<Tag>, which may or may not match the associated condition
// Values of type Com.Amazonaws.Kms.TagValueType will be assigned the default value of ""
// Values of type Com.Amazonaws.Kms.TrustAnchorCertificateType will be assigned the default value of "a"
// Merging boogie files...
// Converting function calls to method calls...
// Adding Impl$$ methods to support inlining...
// Removing assertions...
// Annotating blocks...
// Generating modifications...
// Test MaterialProviders.DefaultCMM.DefaultCMM.OfKeyring(block#1870601) covers block 1870601
// Extracting the test for MaterialProviders.DefaultCMM.DefaultCMM.OfKeyring(block#1870601) from the counterexample...
// Failed to determine a variable type (element T@U!val!1812).
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880150) covers block 1880127
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880150) covers block 1880129
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880150) covers block 1880131
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880150) covers block 1880133
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880150) covers block 1880135
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880150) covers block 1880138
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880150) covers block 1880141
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880150) covers block 1880143
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880150) covers block 1880145
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880150) covers block 1880147
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880150) covers block 1880150
// Extracting the test for MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880150) from the counterexample...
method {:test} test1() {
var v1 : Aws.Crypto.IKeyring := getFreshAwsCryptoIKeyring();
var v0 : MaterialProviders.DefaultCMM.DefaultCMM := getFreshMaterialProvidersDefaultCMMDefaultCMM(v1);
var d2 : Aws.Crypto.EncryptionContext := map[];
var d3 : Aws.Crypto.CommitmentPolicy := Aws.Crypto.CommitmentPolicy.FORBID_ENCRYPT_ALLOW_DECRYPT;
var d4 : Aws.Crypto.AlgorithmSuiteId := Aws.Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_NO_KDF;
var d5 : Wrappers.Option<Aws.Crypto.AlgorithmSuiteId> := Wrappers.Option<Aws.Crypto.AlgorithmSuiteId>.Some(value:=d4);
var d6 : Wrappers.Option<StandardLibrary.UInt.int64> := Wrappers.Option<StandardLibrary.UInt.int64>.None;
var d7 : Aws.Crypto.GetEncryptionMaterialsInput := Aws.Crypto.GetEncryptionMaterialsInput.GetEncryptionMaterialsInput(encryptionContext:=d2,commitmentPolicy:=d3,algorithmSuiteId:=d5,maxPlaintextLength:=d6);
var r0 := v0.GetEncryptionMaterials(d7);
expect r0.Success? ==> MaterialProviders.Materials.EncryptionMaterialsWithPlaintextDataKey(r0.value.encryptionMaterials) && (MaterialProviders.AlgorithmSuites.GetSuite(r0.value.encryptionMaterials.algorithmSuiteId).signature.ECDSA? <==> MaterialProviders.Materials.EC_PUBLIC_KEY_FIELD in r0.value.encryptionMaterials.encryptionContext);
expect MaterialProviders.Materials.EC_PUBLIC_KEY_FIELD in d7.encryptionContext ==> r0.Failure?;
expect d7.algorithmSuiteId.Some? && MaterialProviders.Commitment.ValidateCommitmentPolicyOnEncrypt(d7.algorithmSuiteId.value, d7.commitmentPolicy).Failure? ==> r0.Failure?;
}
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880149) covers block 1880127
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880149) covers block 1880129
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880149) covers block 1880131
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880149) covers block 1880133
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880149) covers block 1880135
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880149) covers block 1880138
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880149) covers block 1880141
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880149) covers block 1880143
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880149) covers block 1880145
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880149) covers block 1880147
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880149) covers block 1880149
// Extracting the test for MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880149) from the counterexample...
// Test for MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880149) matches a test previously generated for MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880150).
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880146) covers block 1880127
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880146) covers block 1880129
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880146) covers block 1880131
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880146) covers block 1880133
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880146) covers block 1880135
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880146) covers block 1880138
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880146) covers block 1880141
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880146) covers block 1880143
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880146) covers block 1880145
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880146) covers block 1880146
// Extracting the test for MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880146) from the counterexample...
// Test for MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880146) matches a test previously generated for MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880150).
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880144) covers block 1880127
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880144) covers block 1880129
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880144) covers block 1880131
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880144) covers block 1880133
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880144) covers block 1880135
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880144) covers block 1880138
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880144) covers block 1880141
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880144) covers block 1880144
// Extracting the test for MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880144) from the counterexample...
// Test for MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880144) matches a test previously generated for MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880150).
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880140) covers block 1880127
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880140) covers block 1880129
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880140) covers block 1880131
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880140) covers block 1880133
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880140) covers block 1880135
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880140) covers block 1880138
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880140) covers block 1880140
// Extracting the test for MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880140) from the counterexample...
// Test for MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880140) matches a test previously generated for MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880150).
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880137) covers block 1880127
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880137) covers block 1880129
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880137) covers block 1880131
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880137) covers block 1880133
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880137) covers block 1880135
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880137) covers block 1880137
// Extracting the test for MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880137) from the counterexample...
method {:test} test6() {
var v1 : Aws.Crypto.IKeyring := getFreshAwsCryptoIKeyring();
var v0 : MaterialProviders.DefaultCMM.DefaultCMM := getFreshMaterialProvidersDefaultCMMDefaultCMM(v1);
var d2 : Aws.Crypto.EncryptionContext := map[];
var d3 : Aws.Crypto.CommitmentPolicy := Aws.Crypto.CommitmentPolicy.FORBID_ENCRYPT_ALLOW_DECRYPT;
var d4 : Aws.Crypto.AlgorithmSuiteId := Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_NO_KDF;
var d5 : Wrappers.Option<Aws.Crypto.AlgorithmSuiteId> := Wrappers.Option<Aws.Crypto.AlgorithmSuiteId>.Some(value:=d4);
var d6 : Wrappers.Option<StandardLibrary.UInt.int64> := Wrappers.Option<StandardLibrary.UInt.int64>.None;
var d7 : Aws.Crypto.GetEncryptionMaterialsInput := Aws.Crypto.GetEncryptionMaterialsInput.GetEncryptionMaterialsInput(encryptionContext:=d2,commitmentPolicy:=d3,algorithmSuiteId:=d5,maxPlaintextLength:=d6);
var r0 := v0.GetEncryptionMaterials(d7);
expect r0.Success? ==> MaterialProviders.Materials.EncryptionMaterialsWithPlaintextDataKey(r0.value.encryptionMaterials) && (MaterialProviders.AlgorithmSuites.GetSuite(r0.value.encryptionMaterials.algorithmSuiteId).signature.ECDSA? <==> MaterialProviders.Materials.EC_PUBLIC_KEY_FIELD in r0.value.encryptionMaterials.encryptionContext);
expect MaterialProviders.Materials.EC_PUBLIC_KEY_FIELD in d7.encryptionContext ==> r0.Failure?;
expect d7.algorithmSuiteId.Some? && MaterialProviders.Commitment.ValidateCommitmentPolicyOnEncrypt(d7.algorithmSuiteId.value, d7.commitmentPolicy).Failure? ==> r0.Failure?;
}
// No test can be generated for MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880134) because the verifier suceeded.
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880132) covers block 1880127
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880132) covers block 1880129
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880132) covers block 1880132
// Extracting the test for MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880132) from the counterexample...
method {:test} test7() {
var v1 : Aws.Crypto.IKeyring := getFreshAwsCryptoIKeyring();
var v0 : MaterialProviders.DefaultCMM.DefaultCMM := getFreshMaterialProvidersDefaultCMMDefaultCMM(v1);
var d2 : Aws.Crypto.EncryptionContext := map[];
var d3 : Aws.Crypto.CommitmentPolicy := Aws.Crypto.CommitmentPolicy.REQUIRE_ENCRYPT_ALLOW_DECRYPT;
var d4 : Wrappers.Option<Aws.Crypto.AlgorithmSuiteId> := Wrappers.Option<Aws.Crypto.AlgorithmSuiteId>.None;
var d5 : Wrappers.Option<StandardLibrary.UInt.int64> := Wrappers.Option<StandardLibrary.UInt.int64>.None;
var d6 : Aws.Crypto.GetEncryptionMaterialsInput := Aws.Crypto.GetEncryptionMaterialsInput.GetEncryptionMaterialsInput(encryptionContext:=d2,commitmentPolicy:=d3,algorithmSuiteId:=d4,maxPlaintextLength:=d5);
var r0 := v0.GetEncryptionMaterials(d6);
expect r0.Success? ==> MaterialProviders.Materials.EncryptionMaterialsWithPlaintextDataKey(r0.value.encryptionMaterials) && (MaterialProviders.AlgorithmSuites.GetSuite(r0.value.encryptionMaterials.algorithmSuiteId).signature.ECDSA? <==> MaterialProviders.Materials.EC_PUBLIC_KEY_FIELD in r0.value.encryptionMaterials.encryptionContext);
expect MaterialProviders.Materials.EC_PUBLIC_KEY_FIELD in d6.encryptionContext ==> r0.Failure?;
expect d6.algorithmSuiteId.Some? && MaterialProviders.Commitment.ValidateCommitmentPolicyOnEncrypt(d6.algorithmSuiteId.value, d6.commitmentPolicy).Failure? ==> r0.Failure?;
}
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880128) covers block 1880127
// Test MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880128) covers block 1880128
// Extracting the test for MaterialProviders.DefaultCMM.DefaultCMM.GetEncryptionMaterials(block#1880128) from the counterexample...
method {:test} test8() {
var v1 : Aws.Crypto.IKeyring := getFreshAwsCryptoIKeyring();
var v0 : MaterialProviders.DefaultCMM.DefaultCMM := getFreshMaterialProvidersDefaultCMMDefaultCMM(v1);
var d2 : UTF8.ValidUTF8Bytes := [(97 as StandardLibrary.UInt.uint8), (119 as StandardLibrary.UInt.uint8), (115 as StandardLibrary.UInt.uint8), (45 as StandardLibrary.UInt.uint8), (99 as StandardLibrary.UInt.uint8), (114 as StandardLibrary.UInt.uint8), (121 as StandardLibrary.UInt.uint8), (112 as StandardLibrary.UInt.uint8), (116 as StandardLibrary.UInt.uint8), (111 as StandardLibrary.UInt.uint8), (45 as StandardLibrary.UInt.uint8), (112 as StandardLibrary.UInt.uint8), (117 as StandardLibrary.UInt.uint8), (98 as StandardLibrary.UInt.uint8), (108 as StandardLibrary.UInt.uint8), (105 as StandardLibrary.UInt.uint8), (99 as StandardLibrary.UInt.uint8), (45 as StandardLibrary.UInt.uint8), (107 as StandardLibrary.UInt.uint8), (101 as StandardLibrary.UInt.uint8), (121 as StandardLibrary.UInt.uint8)];
expect UTF8.ValidUTF8Seq(d2), "Test does not meet type constraints and should be removed";
var d3 : UTF8.ValidUTF8Bytes := [(218 as StandardLibrary.UInt.uint8), (169 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8)];
expect UTF8.ValidUTF8Seq(d3), "Test does not meet type constraints and should be removed";
var d4 : UTF8.ValidUTF8Bytes := [(207 as StandardLibrary.UInt.uint8), (177 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8)];
expect UTF8.ValidUTF8Seq(d4), "Test does not meet type constraints and should be removed";
var d5 : UTF8.ValidUTF8Bytes := [(206 as StandardLibrary.UInt.uint8), (138 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8)];
expect UTF8.ValidUTF8Seq(d5), "Test does not meet type constraints and should be removed";
var d6 : UTF8.ValidUTF8Bytes := [(217 as StandardLibrary.UInt.uint8), (156 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8)];
expect UTF8.ValidUTF8Seq(d6), "Test does not meet type constraints and should be removed";
var d7 : UTF8.ValidUTF8Bytes := [(210 as StandardLibrary.UInt.uint8), (161 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8)];
expect UTF8.ValidUTF8Seq(d7), "Test does not meet type constraints and should be removed";
var d8 : UTF8.ValidUTF8Bytes := [(222 as StandardLibrary.UInt.uint8), (182 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8)];
expect UTF8.ValidUTF8Seq(d8), "Test does not meet type constraints and should be removed";
var d9 : UTF8.ValidUTF8Bytes := [(223 as StandardLibrary.UInt.uint8), (164 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8)];
expect UTF8.ValidUTF8Seq(d9), "Test does not meet type constraints and should be removed";
var d10 : Aws.Crypto.EncryptionContext := map[d2 := d3, d4 := d5, d6 := d7, d8 := d9];
var d11 : Aws.Crypto.CommitmentPolicy := Crypto.CommitmentPolicy.FORBID_ENCRYPT_ALLOW_DECRYPT;
var d12 : Wrappers.Option<Aws.Crypto.AlgorithmSuiteId> := Wrappers.Option<Crypto.AlgorithmSuiteId>.None;
var d13 : Wrappers.Option<StandardLibrary.UInt.int64> := Wrappers.Option<StandardLibrary.UInt.int64>.None;
var d14 : Aws.Crypto.GetEncryptionMaterialsInput := Aws.Crypto.GetEncryptionMaterialsInput.GetEncryptionMaterialsInput(encryptionContext:=d10,commitmentPolicy:=d11,algorithmSuiteId:=d12,maxPlaintextLength:=d13);
var r0 := v0.GetEncryptionMaterials(d14);
expect r0.Success? ==> MaterialProviders.Materials.EncryptionMaterialsWithPlaintextDataKey(r0.value.encryptionMaterials) && (MaterialProviders.AlgorithmSuites.GetSuite(r0.value.encryptionMaterials.algorithmSuiteId).signature.ECDSA? <==> MaterialProviders.Materials.EC_PUBLIC_KEY_FIELD in r0.value.encryptionMaterials.encryptionContext);
expect MaterialProviders.Materials.EC_PUBLIC_KEY_FIELD in d14.encryptionContext ==> r0.Failure?;
expect d14.algorithmSuiteId.Some? && MaterialProviders.Commitment.ValidateCommitmentPolicyOnEncrypt(d14.algorithmSuiteId.value, d14.commitmentPolicy).Failure? ==> r0.Failure?;
}
// Test MaterialProviders.DefaultCMM.DefaultCMM.DecryptMaterials(block#1886265) covers block 1886254
// Test MaterialProviders.DefaultCMM.DefaultCMM.DecryptMaterials(block#1886265) covers block 1886256
// Test MaterialProviders.DefaultCMM.DefaultCMM.DecryptMaterials(block#1886265) covers block 1886259
// Test MaterialProviders.DefaultCMM.DefaultCMM.DecryptMaterials(block#1886265) covers block 1886262
// Test MaterialProviders.DefaultCMM.DefaultCMM.DecryptMaterials(block#1886265) covers block 1886265
// Extracting the test for MaterialProviders.DefaultCMM.DefaultCMM.DecryptMaterials(block#1886265) from the counterexample...
method {:test} test9() {
var v1 : Aws.Crypto.IKeyring := getFreshAwsCryptoIKeyring();
var v0 : MaterialProviders.DefaultCMM.DefaultCMM := getFreshMaterialProvidersDefaultCMMDefaultCMM(v1);
var d2 : Aws.Crypto.AlgorithmSuiteId := Aws.Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_NO_KDF;
var d3 : Aws.Crypto.CommitmentPolicy := Aws.Crypto.CommitmentPolicy.FORBID_ENCRYPT_ALLOW_DECRYPT;
var d4 : Aws.Crypto.EncryptedDataKeyList := [];
var d5 : Aws.Crypto.EncryptionContext := map[];
var d6 : Aws.Crypto.DecryptMaterialsInput := Aws.Crypto.DecryptMaterialsInput.DecryptMaterialsInput(algorithmSuiteId:=d2,commitmentPolicy:=d3,encryptedDataKeys:=d4,encryptionContext:=d5);
var r0 := v0.DecryptMaterials(d6);
expect r0.Success? ==> true && MaterialProviders.Materials.DecryptionMaterialsWithPlaintextDataKey(r0.value.decryptionMaterials);
expect (MaterialProviders.AlgorithmSuites.GetSuite(d6.algorithmSuiteId).signature.None? <==> MaterialProviders.Materials.EC_PUBLIC_KEY_FIELD in d6.encryptionContext) ==> r0.Failure?;
expect MaterialProviders.Commitment.ValidateCommitmentPolicyOnDecrypt(d6.algorithmSuiteId, d6.commitmentPolicy).Failure? ==> r0.Failure?;
}
// Test MaterialProviders.DefaultCMM.DefaultCMM.DecryptMaterials(block#1886264) covers block 1886254
// Test MaterialProviders.DefaultCMM.DefaultCMM.DecryptMaterials(block#1886264) covers block 1886256
// Test MaterialProviders.DefaultCMM.DefaultCMM.DecryptMaterials(block#1886264) covers block 1886259
// Test MaterialProviders.DefaultCMM.DefaultCMM.DecryptMaterials(block#1886264) covers block 1886262
// Test MaterialProviders.DefaultCMM.DefaultCMM.DecryptMaterials(block#1886264) covers block 1886264
// Extracting the test for MaterialProviders.DefaultCMM.DefaultCMM.DecryptMaterials(block#1886264) from the counterexample...
// Test for MaterialProviders.DefaultCMM.DefaultCMM.DecryptMaterials(block#1886264) matches a test previously generated for MaterialProviders.DefaultCMM.DefaultCMM.DecryptMaterials(block#1886265).
// Test MaterialProviders.DefaultCMM.DefaultCMM.DecryptMaterials(block#1886261) covers block 1886254
// Test MaterialProviders.DefaultCMM.DefaultCMM.DecryptMaterials(block#1886261) covers block 1886256
// Test MaterialProviders.DefaultCMM.DefaultCMM.DecryptMaterials(block#1886261) covers block 1886259
// Test MaterialProviders.DefaultCMM.DefaultCMM.DecryptMaterials(block#1886261) covers block 1886261
// Extracting the test for MaterialProviders.DefaultCMM.DefaultCMM.DecryptMaterials(block#1886261) from the counterexample...
// Test for MaterialProviders.DefaultCMM.DefaultCMM.DecryptMaterials(block#1886261) matches a test previously generated for MaterialProviders.DefaultCMM.DefaultCMM.DecryptMaterials(block#1886265).
// Test MaterialProviders.DefaultCMM.DefaultCMM.DecryptMaterials(block#1886258) covers block 1886254
// Test MaterialProviders.DefaultCMM.DefaultCMM.DecryptMaterials(block#1886258) covers block 1886256
// Test MaterialProviders.DefaultCMM.DefaultCMM.DecryptMaterials(block#1886258) covers block 1886258
// Extracting the test for MaterialProviders.DefaultCMM.DefaultCMM.DecryptMaterials(block#1886258) from the counterexample...
method {:test} test12() {
var v1 : Aws.Crypto.IKeyring := getFreshAwsCryptoIKeyring();
var v0 : MaterialProviders.DefaultCMM.DefaultCMM := getFreshMaterialProvidersDefaultCMMDefaultCMM(v1);
var d2 : Aws.Crypto.AlgorithmSuiteId := Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_NO_KDF;
var d3 : Aws.Crypto.CommitmentPolicy := Aws.Crypto.CommitmentPolicy.FORBID_ENCRYPT_ALLOW_DECRYPT;
var d4 : Aws.Crypto.EncryptedDataKeyList := [];
var d5 : Aws.Crypto.EncryptionContext := map[];
var d6 : Aws.Crypto.DecryptMaterialsInput := Aws.Crypto.DecryptMaterialsInput.DecryptMaterialsInput(algorithmSuiteId:=d2,commitmentPolicy:=d3,encryptedDataKeys:=d4,encryptionContext:=d5);
var r0 := v0.DecryptMaterials(d6);
expect r0.Success? ==> true && MaterialProviders.Materials.DecryptionMaterialsWithPlaintextDataKey(r0.value.decryptionMaterials);
expect (MaterialProviders.AlgorithmSuites.GetSuite(d6.algorithmSuiteId).signature.None? <==> MaterialProviders.Materials.EC_PUBLIC_KEY_FIELD in d6.encryptionContext) ==> r0.Failure?;
expect MaterialProviders.Commitment.ValidateCommitmentPolicyOnDecrypt(d6.algorithmSuiteId, d6.commitmentPolicy).Failure? ==> r0.Failure?;
}
// No test can be generated for MaterialProviders.DefaultCMM.DefaultCMM.DecryptMaterials(block#1886255) because the verifier suceeded.
// No test can be generated for MaterialProviders.DefaultCMM.InitializeEncryptionMaterials(block#1891383) because the verifier suceeded.
// Test MaterialProviders.DefaultCMM.InitializeEncryptionMaterials(block#1891382) covers block 1891373
// Test MaterialProviders.DefaultCMM.InitializeEncryptionMaterials(block#1891382) covers block 1891381
// Test MaterialProviders.DefaultCMM.InitializeEncryptionMaterials(block#1891382) covers block 1891382
// Extracting the test for MaterialProviders.DefaultCMM.InitializeEncryptionMaterials(block#1891382) from the counterexample...
method {:test} test13() {
var d0 : Aws.Crypto.AlgorithmSuiteId := Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_NO_KDF;
var d1 : AESEncryption.AES_GCM := AESEncryption.AES_GCM.AES_GCM(keyLength:=32,tagLength:=16,ivLength:=12);
var d2 : MaterialProviders.AlgorithmSuites.KeyDerivationAlgorithm := MaterialProviders.AlgorithmSuites.DerivationAlgorithm.IDENTITY;
expect (true && d2.HKDF? ==> d2.inputKeyLength == d2.outputKeyLength && (d2.hmac == HMAC.Digests.SHA_512 ==> d2.inputKeyLength == 32)) && !d2.None?, "Test does not meet type constraints and should be removed";
var d3 : MaterialProviders.AlgorithmSuites.CommitmentDerivationAlgorithm := MaterialProviders.AlgorithmSuites.DerivationAlgorithm.None;
expect (true && d3.HKDF? ==> d3.hmac.SHA_512? && d3.saltLength == 32 && d3.inputKeyLength == 32 && d3.outputKeyLength == 32) && !d3.IDENTITY?, "Test does not meet type constraints and should be removed";
var d4 : MaterialProviders.AlgorithmSuites.SignatureAlgorithm := MaterialProviders.AlgorithmSuites.SignatureAlgorithm.None;
var d5 : MaterialProviders.AlgorithmSuites.AlgorithmSuite := MaterialProviders.AlgorithmSuites.AlgorithmSuiteInfo.AlgorithmSuiteInfo(messageVersion:=48,id:=d0,encrypt:=d1,kdf:=d2,commitment:=d3,signature:=d4);
expect (d5.kdf.HKDF? ==> d5.kdf.outputKeyLength == d5.encrypt.keyLength) && (d5.signature.ECDSA? ==> d5.kdf.HKDF?) && (d5.commitment.HKDF? ==> d5.commitment.saltLength == 32 && d5.commitment == d5.kdf) && (d5.kdf.HKDF? && d5.commitment.None? ==> d5.kdf.saltLength == 0) && (d5.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_NO_KDF ==> d5.messageVersion == 1 && d5.encrypt.keyLength == 16 && d5.kdf.IDENTITY? && d5.signature.None? && d5.commitment.None?) && (d5.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_192_GCM_IV12_TAG16_NO_KDF ==> d5.messageVersion == 1 && d5.encrypt.keyLength == 24 && d5.kdf.IDENTITY? && d5.signature.None? && d5.commitment.None?) && (d5.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_IV12_TAG16_NO_KDF ==> d5.messageVersion == 1 && d5.encrypt.keyLength == 32 && d5.kdf.IDENTITY? && d5.signature.None? && d5.commitment.None?) && (d5.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_HKDF_SHA256 ==> d5.messageVersion == 1 && d5.encrypt.keyLength == 16 && d5.kdf.HKDF? && d5.kdf.hmac == HMAC.Digests.SHA_256 && d5.signature.None? && d5.commitment.None?) && (d5.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_192_GCM_IV12_TAG16_HKDF_SHA256 ==> d5.messageVersion == 1 && d5.encrypt.keyLength == 24 && d5.kdf.HKDF? && d5.kdf.hmac == HMAC.Digests.SHA_256 && d5.signature.None? && d5.commitment.None?) && (d5.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_IV12_TAG16_HKDF_SHA256 ==> d5.messageVersion == 1 && d5.encrypt.keyLength == 32 && d5.kdf.HKDF? && d5.kdf.hmac == HMAC.Digests.SHA_256 && d5.signature.None? && d5.commitment.None?) && (d5.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_HKDF_SHA256_ECDSA_P256 ==> d5.messageVersion == 1 && d5.encrypt.keyLength == 16 && d5.kdf.HKDF? && d5.kdf.hmac == HMAC.Digests.SHA_256 && d5.signature.ECDSA? && d5.signature.curve == Signature.ECDSAParams.ECDSA_P256 && d5.commitment.None?) && (d5.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_192_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384 ==> d5.messageVersion == 1 && d5.encrypt.keyLength == 24 && d5.kdf.HKDF? && d5.kdf.hmac == HMAC.Digests.SHA_384 && d5.signature.ECDSA? && d5.signature.curve == Signature.ECDSAParams.ECDSA_P384 && d5.commitment.None?) && (d5.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384 ==> d5.messageVersion == 1 && d5.encrypt.keyLength == 32 && d5.kdf.HKDF? && d5.kdf.hmac == HMAC.Digests.SHA_384 && d5.signature.ECDSA? && d5.signature.curve == Signature.ECDSAParams.ECDSA_P384 && d5.commitment.None?) && (d5.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_HKDF_SHA512_COMMIT_KEY ==> d5.messageVersion == 2 && d5.encrypt.keyLength == 32 && d5.kdf.HKDF? && d5.kdf.hmac == HMAC.Digests.SHA_512 && d5.signature.None? && d5.commitment.HKDF?) && (d5.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_HKDF_SHA512_COMMIT_KEY_ECDSA_P384 ==> d5.messageVersion == 2 && d5.encrypt.keyLength == 32 && d5.kdf.HKDF? && d5.kdf.hmac == HMAC.Digests.SHA_512 && d5.signature.ECDSA? && d5.signature.curve == Signature.ECDSAParams.ECDSA_P384 && d5.commitment.HKDF?), "Test does not meet type constraints and should be removed";
var d6 : Aws.Crypto.EncryptionContext := map[];
expect MaterialProviders.Materials.EC_PUBLIC_KEY_FIELD !in d6, "Test does not meet preconditions and should be removed";
var r0 := MaterialProviders.DefaultCMM.InitializeEncryptionMaterials(d5, d6);
expect true && r0.Success? ==> MaterialProviders.Materials.ValidEncryptionMaterials(r0.value) && r0.value.algorithmSuiteId == d5.id && (!d5.signature.None? <==> MaterialProviders.Materials.EC_PUBLIC_KEY_FIELD in r0.value.encryptionContext) && (d5.signature.None? <==> r0.value.signingKey.None?);
}
// Test MaterialProviders.DefaultCMM.InitializeEncryptionMaterials(block#1891379) covers block 1891373
// Test MaterialProviders.DefaultCMM.InitializeEncryptionMaterials(block#1891379) covers block 1891374
// Test MaterialProviders.DefaultCMM.InitializeEncryptionMaterials(block#1891379) covers block 1891376
// Test MaterialProviders.DefaultCMM.InitializeEncryptionMaterials(block#1891379) covers block 1891379
// Extracting the test for MaterialProviders.DefaultCMM.InitializeEncryptionMaterials(block#1891379) from the counterexample...
method {:test} test14() {
var d0 : Aws.Crypto.AlgorithmSuiteId := Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_NO_KDF;
var d1 : AESEncryption.AES_GCM := AESEncryption.AES_GCM.AES_GCM(keyLength:=32,tagLength:=16,ivLength:=12);
var d2 : HMAC.Digests := HMAC.Digests.SHA_512;
var d3 : MaterialProviders.AlgorithmSuites.KeyDerivationAlgorithm := MaterialProviders.AlgorithmSuites.DerivationAlgorithm.HKDF(hmac:=d2,saltLength:=32,inputKeyLength:=(32 as AESEncryption.KeyLength),outputKeyLength:=(32 as AESEncryption.KeyLength));
expect (true && d3.HKDF? ==> d3.inputKeyLength == d3.outputKeyLength && (d3.hmac == HMAC.Digests.SHA_512 ==> d3.inputKeyLength == 32)) && !d3.None?, "Test does not meet type constraints and should be removed";
var d4 : HMAC.Digests := HMAC.Digests.SHA_512;
var d5 : MaterialProviders.AlgorithmSuites.CommitmentDerivationAlgorithm := MaterialProviders.AlgorithmSuites.DerivationAlgorithm.HKDF(hmac:=d4,saltLength:=32,inputKeyLength:=(32 as AESEncryption.KeyLength),outputKeyLength:=(32 as AESEncryption.KeyLength));
expect (true && d5.HKDF? ==> d5.hmac.SHA_512? && d5.saltLength == 32 && d5.inputKeyLength == 32 && d5.outputKeyLength == 32) && !d5.IDENTITY?, "Test does not meet type constraints and should be removed";
var d6 : Signature.ECDSAParams := Signature.ECDSAParams.ECDSA_P256;
var d7 : MaterialProviders.AlgorithmSuites.SignatureAlgorithm := MaterialProviders.AlgorithmSuites.SignatureAlgorithm.ECDSA(curve:=d6);
var d8 : MaterialProviders.AlgorithmSuites.AlgorithmSuite := MaterialProviders.AlgorithmSuites.AlgorithmSuiteInfo.AlgorithmSuiteInfo(messageVersion:=56,id:=d0,encrypt:=d1,kdf:=d3,commitment:=d5,signature:=d7);
expect (d8.kdf.HKDF? ==> d8.kdf.outputKeyLength == d8.encrypt.keyLength) && (d8.signature.ECDSA? ==> d8.kdf.HKDF?) && (d8.commitment.HKDF? ==> d8.commitment.saltLength == 32 && d8.commitment == d8.kdf) && (d8.kdf.HKDF? && d8.commitment.None? ==> d8.kdf.saltLength == 0) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_NO_KDF ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 16 && d8.kdf.IDENTITY? && d8.signature.None? && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_192_GCM_IV12_TAG16_NO_KDF ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 24 && d8.kdf.IDENTITY? && d8.signature.None? && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_IV12_TAG16_NO_KDF ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 32 && d8.kdf.IDENTITY? && d8.signature.None? && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_HKDF_SHA256 ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 16 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_256 && d8.signature.None? && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_192_GCM_IV12_TAG16_HKDF_SHA256 ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 24 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_256 && d8.signature.None? && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_IV12_TAG16_HKDF_SHA256 ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 32 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_256 && d8.signature.None? && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_HKDF_SHA256_ECDSA_P256 ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 16 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_256 && d8.signature.ECDSA? && d8.signature.curve == Signature.ECDSAParams.ECDSA_P256 && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_192_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384 ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 24 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_384 && d8.signature.ECDSA? && d8.signature.curve == Signature.ECDSAParams.ECDSA_P384 && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384 ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 32 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_384 && d8.signature.ECDSA? && d8.signature.curve == Signature.ECDSAParams.ECDSA_P384 && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_HKDF_SHA512_COMMIT_KEY ==> d8.messageVersion == 2 && d8.encrypt.keyLength == 32 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_512 && d8.signature.None? && d8.commitment.HKDF?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_HKDF_SHA512_COMMIT_KEY_ECDSA_P384 ==> d8.messageVersion == 2 && d8.encrypt.keyLength == 32 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_512 && d8.signature.ECDSA? && d8.signature.curve == Signature.ECDSAParams.ECDSA_P384 && d8.commitment.HKDF?), "Test does not meet type constraints and should be removed";
var d9 : Aws.Crypto.EncryptionContext := map[];
expect MaterialProviders.Materials.EC_PUBLIC_KEY_FIELD !in d9, "Test does not meet preconditions and should be removed";
var r0 := MaterialProviders.DefaultCMM.InitializeEncryptionMaterials(d8, d9);
expect true && r0.Success? ==> MaterialProviders.Materials.ValidEncryptionMaterials(r0.value) && r0.value.algorithmSuiteId == d8.id && (!d8.signature.None? <==> MaterialProviders.Materials.EC_PUBLIC_KEY_FIELD in r0.value.encryptionContext) && (d8.signature.None? <==> r0.value.signingKey.None?);
}
// No test can be generated for MaterialProviders.DefaultCMM.InitializeEncryptionMaterials(block#1891378) because the verifier suceeded.
// Test MaterialProviders.DefaultCMM.InitializeEncryptionMaterials(block#1891375) covers block 1891373
// Test MaterialProviders.DefaultCMM.InitializeEncryptionMaterials(block#1891375) covers block 1891374
// Test MaterialProviders.DefaultCMM.InitializeEncryptionMaterials(block#1891375) covers block 1891375
// Extracting the test for MaterialProviders.DefaultCMM.InitializeEncryptionMaterials(block#1891375) from the counterexample...
method {:test} test15() {
var d0 : Aws.Crypto.AlgorithmSuiteId := Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_NO_KDF;
var d1 : AESEncryption.AES_GCM := AESEncryption.AES_GCM.AES_GCM(keyLength:=32,tagLength:=16,ivLength:=12);
var d2 : HMAC.Digests := HMAC.Digests.SHA_512;
var d3 : MaterialProviders.AlgorithmSuites.KeyDerivationAlgorithm := MaterialProviders.AlgorithmSuites.DerivationAlgorithm.HKDF(hmac:=d2,saltLength:=32,inputKeyLength:=(32 as AESEncryption.KeyLength),outputKeyLength:=(32 as AESEncryption.KeyLength));
expect (true && d3.HKDF? ==> d3.inputKeyLength == d3.outputKeyLength && (d3.hmac == HMAC.Digests.SHA_512 ==> d3.inputKeyLength == 32)) && !d3.None?, "Test does not meet type constraints and should be removed";
var d4 : HMAC.Digests := HMAC.Digests.SHA_512;
var d5 : MaterialProviders.AlgorithmSuites.CommitmentDerivationAlgorithm := MaterialProviders.AlgorithmSuites.DerivationAlgorithm.HKDF(hmac:=d4,saltLength:=32,inputKeyLength:=(32 as AESEncryption.KeyLength),outputKeyLength:=(32 as AESEncryption.KeyLength));
expect (true && d5.HKDF? ==> d5.hmac.SHA_512? && d5.saltLength == 32 && d5.inputKeyLength == 32 && d5.outputKeyLength == 32) && !d5.IDENTITY?, "Test does not meet type constraints and should be removed";
var d6 : Signature.ECDSAParams := Signature.ECDSAParams.ECDSA_P384;
var d7 : MaterialProviders.AlgorithmSuites.SignatureAlgorithm := MaterialProviders.AlgorithmSuites.SignatureAlgorithm.ECDSA(curve:=d6);
var d8 : MaterialProviders.AlgorithmSuites.AlgorithmSuite := MaterialProviders.AlgorithmSuites.AlgorithmSuiteInfo.AlgorithmSuiteInfo(messageVersion:=48,id:=d0,encrypt:=d1,kdf:=d3,commitment:=d5,signature:=d7);
expect (d8.kdf.HKDF? ==> d8.kdf.outputKeyLength == d8.encrypt.keyLength) && (d8.signature.ECDSA? ==> d8.kdf.HKDF?) && (d8.commitment.HKDF? ==> d8.commitment.saltLength == 32 && d8.commitment == d8.kdf) && (d8.kdf.HKDF? && d8.commitment.None? ==> d8.kdf.saltLength == 0) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_NO_KDF ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 16 && d8.kdf.IDENTITY? && d8.signature.None? && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_192_GCM_IV12_TAG16_NO_KDF ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 24 && d8.kdf.IDENTITY? && d8.signature.None? && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_IV12_TAG16_NO_KDF ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 32 && d8.kdf.IDENTITY? && d8.signature.None? && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_HKDF_SHA256 ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 16 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_256 && d8.signature.None? && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_192_GCM_IV12_TAG16_HKDF_SHA256 ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 24 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_256 && d8.signature.None? && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_IV12_TAG16_HKDF_SHA256 ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 32 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_256 && d8.signature.None? && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_HKDF_SHA256_ECDSA_P256 ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 16 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_256 && d8.signature.ECDSA? && d8.signature.curve == Signature.ECDSAParams.ECDSA_P256 && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_192_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384 ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 24 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_384 && d8.signature.ECDSA? && d8.signature.curve == Signature.ECDSAParams.ECDSA_P384 && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384 ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 32 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_384 && d8.signature.ECDSA? && d8.signature.curve == Signature.ECDSAParams.ECDSA_P384 && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_HKDF_SHA512_COMMIT_KEY ==> d8.messageVersion == 2 && d8.encrypt.keyLength == 32 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_512 && d8.signature.None? && d8.commitment.HKDF?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_HKDF_SHA512_COMMIT_KEY_ECDSA_P384 ==> d8.messageVersion == 2 && d8.encrypt.keyLength == 32 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_512 && d8.signature.ECDSA? && d8.signature.curve == Signature.ECDSAParams.ECDSA_P384 && d8.commitment.HKDF?), "Test does not meet type constraints and should be removed";
var d9 : Aws.Crypto.EncryptionContext := map[];
expect MaterialProviders.Materials.EC_PUBLIC_KEY_FIELD !in d9, "Test does not meet preconditions and should be removed";
var r0 := MaterialProviders.DefaultCMM.InitializeEncryptionMaterials(d8, d9);
expect true && r0.Success? ==> MaterialProviders.Materials.ValidEncryptionMaterials(r0.value) && r0.value.algorithmSuiteId == d8.id && (!d8.signature.None? <==> MaterialProviders.Materials.EC_PUBLIC_KEY_FIELD in r0.value.encryptionContext) && (d8.signature.None? <==> r0.value.signingKey.None?);
}
// No test can be generated for MaterialProviders.DefaultCMM.InitializeDecryptionMaterials(block#1899995) because the verifier suceeded.
// Test MaterialProviders.DefaultCMM.InitializeDecryptionMaterials(block#1899993) covers block 1899982
// Test MaterialProviders.DefaultCMM.InitializeDecryptionMaterials(block#1899993) covers block 1899990
// Test MaterialProviders.DefaultCMM.InitializeDecryptionMaterials(block#1899993) covers block 1899991
// Test MaterialProviders.DefaultCMM.InitializeDecryptionMaterials(block#1899993) covers block 1899993
// Extracting the test for MaterialProviders.DefaultCMM.InitializeDecryptionMaterials(block#1899993) from the counterexample...
method {:test} test16() {
var d0 : Aws.Crypto.AlgorithmSuiteId := Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_NO_KDF;
var d1 : AESEncryption.AES_GCM := AESEncryption.AES_GCM.AES_GCM(keyLength:=32,tagLength:=16,ivLength:=12);
var d2 : MaterialProviders.AlgorithmSuites.KeyDerivationAlgorithm := MaterialProviders.AlgorithmSuites.DerivationAlgorithm.IDENTITY;
expect (true && d2.HKDF? ==> d2.inputKeyLength == d2.outputKeyLength && (d2.hmac == HMAC.Digests.SHA_512 ==> d2.inputKeyLength == 32)) && !d2.None?, "Test does not meet type constraints and should be removed";
var d3 : MaterialProviders.AlgorithmSuites.CommitmentDerivationAlgorithm := MaterialProviders.AlgorithmSuites.DerivationAlgorithm.None;
expect (true && d3.HKDF? ==> d3.hmac.SHA_512? && d3.saltLength == 32 && d3.inputKeyLength == 32 && d3.outputKeyLength == 32) && !d3.IDENTITY?, "Test does not meet type constraints and should be removed";
var d4 : MaterialProviders.AlgorithmSuites.SignatureAlgorithm := MaterialProviders.AlgorithmSuites.SignatureAlgorithm.None;
var d5 : MaterialProviders.AlgorithmSuites.AlgorithmSuite := MaterialProviders.AlgorithmSuites.AlgorithmSuiteInfo.AlgorithmSuiteInfo(messageVersion:=85,id:=d0,encrypt:=d1,kdf:=d2,commitment:=d3,signature:=d4);
expect (d5.kdf.HKDF? ==> d5.kdf.outputKeyLength == d5.encrypt.keyLength) && (d5.signature.ECDSA? ==> d5.kdf.HKDF?) && (d5.commitment.HKDF? ==> d5.commitment.saltLength == 32 && d5.commitment == d5.kdf) && (d5.kdf.HKDF? && d5.commitment.None? ==> d5.kdf.saltLength == 0) && (d5.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_NO_KDF ==> d5.messageVersion == 1 && d5.encrypt.keyLength == 16 && d5.kdf.IDENTITY? && d5.signature.None? && d5.commitment.None?) && (d5.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_192_GCM_IV12_TAG16_NO_KDF ==> d5.messageVersion == 1 && d5.encrypt.keyLength == 24 && d5.kdf.IDENTITY? && d5.signature.None? && d5.commitment.None?) && (d5.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_IV12_TAG16_NO_KDF ==> d5.messageVersion == 1 && d5.encrypt.keyLength == 32 && d5.kdf.IDENTITY? && d5.signature.None? && d5.commitment.None?) && (d5.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_HKDF_SHA256 ==> d5.messageVersion == 1 && d5.encrypt.keyLength == 16 && d5.kdf.HKDF? && d5.kdf.hmac == HMAC.Digests.SHA_256 && d5.signature.None? && d5.commitment.None?) && (d5.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_192_GCM_IV12_TAG16_HKDF_SHA256 ==> d5.messageVersion == 1 && d5.encrypt.keyLength == 24 && d5.kdf.HKDF? && d5.kdf.hmac == HMAC.Digests.SHA_256 && d5.signature.None? && d5.commitment.None?) && (d5.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_IV12_TAG16_HKDF_SHA256 ==> d5.messageVersion == 1 && d5.encrypt.keyLength == 32 && d5.kdf.HKDF? && d5.kdf.hmac == HMAC.Digests.SHA_256 && d5.signature.None? && d5.commitment.None?) && (d5.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_HKDF_SHA256_ECDSA_P256 ==> d5.messageVersion == 1 && d5.encrypt.keyLength == 16 && d5.kdf.HKDF? && d5.kdf.hmac == HMAC.Digests.SHA_256 && d5.signature.ECDSA? && d5.signature.curve == Signature.ECDSAParams.ECDSA_P256 && d5.commitment.None?) && (d5.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_192_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384 ==> d5.messageVersion == 1 && d5.encrypt.keyLength == 24 && d5.kdf.HKDF? && d5.kdf.hmac == HMAC.Digests.SHA_384 && d5.signature.ECDSA? && d5.signature.curve == Signature.ECDSAParams.ECDSA_P384 && d5.commitment.None?) && (d5.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384 ==> d5.messageVersion == 1 && d5.encrypt.keyLength == 32 && d5.kdf.HKDF? && d5.kdf.hmac == HMAC.Digests.SHA_384 && d5.signature.ECDSA? && d5.signature.curve == Signature.ECDSAParams.ECDSA_P384 && d5.commitment.None?) && (d5.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_HKDF_SHA512_COMMIT_KEY ==> d5.messageVersion == 2 && d5.encrypt.keyLength == 32 && d5.kdf.HKDF? && d5.kdf.hmac == HMAC.Digests.SHA_512 && d5.signature.None? && d5.commitment.HKDF?) && (d5.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_HKDF_SHA512_COMMIT_KEY_ECDSA_P384 ==> d5.messageVersion == 2 && d5.encrypt.keyLength == 32 && d5.kdf.HKDF? && d5.kdf.hmac == HMAC.Digests.SHA_512 && d5.signature.ECDSA? && d5.signature.curve == Signature.ECDSAParams.ECDSA_P384 && d5.commitment.HKDF?), "Test does not meet type constraints and should be removed";
var d6 : Aws.Crypto.EncryptionContext := map[];
var r0 := MaterialProviders.DefaultCMM.InitializeDecryptionMaterials(d5, d6);
expect (d5.signature.None? <==> MaterialProviders.Materials.EC_PUBLIC_KEY_FIELD in d6) ==> r0.Failure?;
}
// Test MaterialProviders.DefaultCMM.InitializeDecryptionMaterials(block#1899992) covers block 1899982
// Test MaterialProviders.DefaultCMM.InitializeDecryptionMaterials(block#1899992) covers block 1899990
// Test MaterialProviders.DefaultCMM.InitializeDecryptionMaterials(block#1899992) covers block 1899991
// Test MaterialProviders.DefaultCMM.InitializeDecryptionMaterials(block#1899992) covers block 1899992
// Extracting the test for MaterialProviders.DefaultCMM.InitializeDecryptionMaterials(block#1899992) from the counterexample...
method {:test} test17() {
var d0 : Aws.Crypto.AlgorithmSuiteId := Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_NO_KDF;
var d1 : AESEncryption.AES_GCM := AESEncryption.AES_GCM.AES_GCM(keyLength:=32,tagLength:=16,ivLength:=12);
var d2 : MaterialProviders.AlgorithmSuites.KeyDerivationAlgorithm := MaterialProviders.AlgorithmSuites.DerivationAlgorithm.IDENTITY;
expect (true && d2.HKDF? ==> d2.inputKeyLength == d2.outputKeyLength && (d2.hmac == HMAC.Digests.SHA_512 ==> d2.inputKeyLength == 32)) && !d2.None?, "Test does not meet type constraints and should be removed";
var d3 : MaterialProviders.AlgorithmSuites.CommitmentDerivationAlgorithm := MaterialProviders.AlgorithmSuites.DerivationAlgorithm.None;
expect (true && d3.HKDF? ==> d3.hmac.SHA_512? && d3.saltLength == 32 && d3.inputKeyLength == 32 && d3.outputKeyLength == 32) && !d3.IDENTITY?, "Test does not meet type constraints and should be removed";
var d4 : MaterialProviders.AlgorithmSuites.SignatureAlgorithm := MaterialProviders.AlgorithmSuites.SignatureAlgorithm.None;
var d5 : MaterialProviders.AlgorithmSuites.AlgorithmSuite := MaterialProviders.AlgorithmSuites.AlgorithmSuiteInfo.AlgorithmSuiteInfo(messageVersion:=88,id:=d0,encrypt:=d1,kdf:=d2,commitment:=d3,signature:=d4);
expect (d5.kdf.HKDF? ==> d5.kdf.outputKeyLength == d5.encrypt.keyLength) && (d5.signature.ECDSA? ==> d5.kdf.HKDF?) && (d5.commitment.HKDF? ==> d5.commitment.saltLength == 32 && d5.commitment == d5.kdf) && (d5.kdf.HKDF? && d5.commitment.None? ==> d5.kdf.saltLength == 0) && (d5.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_NO_KDF ==> d5.messageVersion == 1 && d5.encrypt.keyLength == 16 && d5.kdf.IDENTITY? && d5.signature.None? && d5.commitment.None?) && (d5.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_192_GCM_IV12_TAG16_NO_KDF ==> d5.messageVersion == 1 && d5.encrypt.keyLength == 24 && d5.kdf.IDENTITY? && d5.signature.None? && d5.commitment.None?) && (d5.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_IV12_TAG16_NO_KDF ==> d5.messageVersion == 1 && d5.encrypt.keyLength == 32 && d5.kdf.IDENTITY? && d5.signature.None? && d5.commitment.None?) && (d5.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_HKDF_SHA256 ==> d5.messageVersion == 1 && d5.encrypt.keyLength == 16 && d5.kdf.HKDF? && d5.kdf.hmac == HMAC.Digests.SHA_256 && d5.signature.None? && d5.commitment.None?) && (d5.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_192_GCM_IV12_TAG16_HKDF_SHA256 ==> d5.messageVersion == 1 && d5.encrypt.keyLength == 24 && d5.kdf.HKDF? && d5.kdf.hmac == HMAC.Digests.SHA_256 && d5.signature.None? && d5.commitment.None?) && (d5.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_IV12_TAG16_HKDF_SHA256 ==> d5.messageVersion == 1 && d5.encrypt.keyLength == 32 && d5.kdf.HKDF? && d5.kdf.hmac == HMAC.Digests.SHA_256 && d5.signature.None? && d5.commitment.None?) && (d5.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_HKDF_SHA256_ECDSA_P256 ==> d5.messageVersion == 1 && d5.encrypt.keyLength == 16 && d5.kdf.HKDF? && d5.kdf.hmac == HMAC.Digests.SHA_256 && d5.signature.ECDSA? && d5.signature.curve == Signature.ECDSAParams.ECDSA_P256 && d5.commitment.None?) && (d5.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_192_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384 ==> d5.messageVersion == 1 && d5.encrypt.keyLength == 24 && d5.kdf.HKDF? && d5.kdf.hmac == HMAC.Digests.SHA_384 && d5.signature.ECDSA? && d5.signature.curve == Signature.ECDSAParams.ECDSA_P384 && d5.commitment.None?) && (d5.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384 ==> d5.messageVersion == 1 && d5.encrypt.keyLength == 32 && d5.kdf.HKDF? && d5.kdf.hmac == HMAC.Digests.SHA_384 && d5.signature.ECDSA? && d5.signature.curve == Signature.ECDSAParams.ECDSA_P384 && d5.commitment.None?) && (d5.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_HKDF_SHA512_COMMIT_KEY ==> d5.messageVersion == 2 && d5.encrypt.keyLength == 32 && d5.kdf.HKDF? && d5.kdf.hmac == HMAC.Digests.SHA_512 && d5.signature.None? && d5.commitment.HKDF?) && (d5.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_HKDF_SHA512_COMMIT_KEY_ECDSA_P384 ==> d5.messageVersion == 2 && d5.encrypt.keyLength == 32 && d5.kdf.HKDF? && d5.kdf.hmac == HMAC.Digests.SHA_512 && d5.signature.ECDSA? && d5.signature.curve == Signature.ECDSAParams.ECDSA_P384 && d5.commitment.HKDF?), "Test does not meet type constraints and should be removed";
var d6 : UTF8.ValidUTF8Bytes := [(97 as StandardLibrary.UInt.uint8), (119 as StandardLibrary.UInt.uint8), (115 as StandardLibrary.UInt.uint8), (45 as StandardLibrary.UInt.uint8), (99 as StandardLibrary.UInt.uint8), (114 as StandardLibrary.UInt.uint8), (121 as StandardLibrary.UInt.uint8), (112 as StandardLibrary.UInt.uint8), (116 as StandardLibrary.UInt.uint8), (111 as StandardLibrary.UInt.uint8), (45 as StandardLibrary.UInt.uint8), (112 as StandardLibrary.UInt.uint8), (117 as StandardLibrary.UInt.uint8), (98 as StandardLibrary.UInt.uint8), (108 as StandardLibrary.UInt.uint8), (105 as StandardLibrary.UInt.uint8), (99 as StandardLibrary.UInt.uint8), (45 as StandardLibrary.UInt.uint8), (107 as StandardLibrary.UInt.uint8), (101 as StandardLibrary.UInt.uint8), (121 as StandardLibrary.UInt.uint8)];
expect UTF8.ValidUTF8Seq(d6), "Test does not meet type constraints and should be removed";
var d7 : UTF8.ValidUTF8Bytes := [(203 as StandardLibrary.UInt.uint8), (183 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8)];
expect UTF8.ValidUTF8Seq(d7), "Test does not meet type constraints and should be removed";
var d8 : UTF8.ValidUTF8Bytes := [(215 as StandardLibrary.UInt.uint8), (128 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8)];
expect UTF8.ValidUTF8Seq(d8), "Test does not meet type constraints and should be removed";
var d9 : UTF8.ValidUTF8Bytes := [(216 as StandardLibrary.UInt.uint8), (146 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8)];
expect UTF8.ValidUTF8Seq(d9), "Test does not meet type constraints and should be removed";
var d10 : UTF8.ValidUTF8Bytes := [(196 as StandardLibrary.UInt.uint8), (132 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8)];
expect UTF8.ValidUTF8Seq(d10), "Test does not meet type constraints and should be removed";
var d11 : UTF8.ValidUTF8Bytes := [(206 as StandardLibrary.UInt.uint8), (151 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8)];
expect UTF8.ValidUTF8Seq(d11), "Test does not meet type constraints and should be removed";
var d12 : UTF8.ValidUTF8Bytes := [(196 as StandardLibrary.UInt.uint8), (162 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8)];
expect UTF8.ValidUTF8Seq(d12), "Test does not meet type constraints and should be removed";
var d13 : UTF8.ValidUTF8Bytes := [(206 as StandardLibrary.UInt.uint8), (180 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8)];
expect UTF8.ValidUTF8Seq(d13), "Test does not meet type constraints and should be removed";
var d14 : Aws.Crypto.EncryptionContext := map[d6 := d7, d8 := d9, d10 := d11, d12 := d13];
var r0 := MaterialProviders.DefaultCMM.InitializeDecryptionMaterials(d5, d14);
expect (d5.signature.None? <==> MaterialProviders.Materials.EC_PUBLIC_KEY_FIELD in d14) ==> r0.Failure?;
}
// Test MaterialProviders.DefaultCMM.InitializeDecryptionMaterials(block#1899988) covers block 1899982
// Test MaterialProviders.DefaultCMM.InitializeDecryptionMaterials(block#1899988) covers block 1899983
// Test MaterialProviders.DefaultCMM.InitializeDecryptionMaterials(block#1899988) covers block 1899985
// Test MaterialProviders.DefaultCMM.InitializeDecryptionMaterials(block#1899988) covers block 1899988
// Extracting the test for MaterialProviders.DefaultCMM.InitializeDecryptionMaterials(block#1899988) from the counterexample...
method {:test} test18() {
var d0 : Aws.Crypto.AlgorithmSuiteId := Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_NO_KDF;
var d1 : AESEncryption.AES_GCM := AESEncryption.AES_GCM.AES_GCM(keyLength:=32,tagLength:=16,ivLength:=12);
var d2 : HMAC.Digests := HMAC.Digests.SHA_512;
var d3 : MaterialProviders.AlgorithmSuites.KeyDerivationAlgorithm := MaterialProviders.AlgorithmSuites.DerivationAlgorithm.HKDF(hmac:=d2,saltLength:=32,inputKeyLength:=(32 as AESEncryption.KeyLength),outputKeyLength:=(32 as AESEncryption.KeyLength));
expect (true && d3.HKDF? ==> d3.inputKeyLength == d3.outputKeyLength && (d3.hmac == HMAC.Digests.SHA_512 ==> d3.inputKeyLength == 32)) && !d3.None?, "Test does not meet type constraints and should be removed";
var d4 : HMAC.Digests := HMAC.Digests.SHA_512;
var d5 : MaterialProviders.AlgorithmSuites.CommitmentDerivationAlgorithm := MaterialProviders.AlgorithmSuites.DerivationAlgorithm.HKDF(hmac:=d4,saltLength:=32,inputKeyLength:=(32 as AESEncryption.KeyLength),outputKeyLength:=(32 as AESEncryption.KeyLength));
expect (true && d5.HKDF? ==> d5.hmac.SHA_512? && d5.saltLength == 32 && d5.inputKeyLength == 32 && d5.outputKeyLength == 32) && !d5.IDENTITY?, "Test does not meet type constraints and should be removed";
var d6 : Signature.ECDSAParams := Signature.ECDSAParams.ECDSA_P384;
var d7 : MaterialProviders.AlgorithmSuites.SignatureAlgorithm := MaterialProviders.AlgorithmSuites.SignatureAlgorithm.ECDSA(curve:=d6);
var d8 : MaterialProviders.AlgorithmSuites.AlgorithmSuite := MaterialProviders.AlgorithmSuites.AlgorithmSuiteInfo.AlgorithmSuiteInfo(messageVersion:=73,id:=d0,encrypt:=d1,kdf:=d3,commitment:=d5,signature:=d7);
expect (d8.kdf.HKDF? ==> d8.kdf.outputKeyLength == d8.encrypt.keyLength) && (d8.signature.ECDSA? ==> d8.kdf.HKDF?) && (d8.commitment.HKDF? ==> d8.commitment.saltLength == 32 && d8.commitment == d8.kdf) && (d8.kdf.HKDF? && d8.commitment.None? ==> d8.kdf.saltLength == 0) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_NO_KDF ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 16 && d8.kdf.IDENTITY? && d8.signature.None? && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_192_GCM_IV12_TAG16_NO_KDF ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 24 && d8.kdf.IDENTITY? && d8.signature.None? && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_IV12_TAG16_NO_KDF ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 32 && d8.kdf.IDENTITY? && d8.signature.None? && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_HKDF_SHA256 ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 16 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_256 && d8.signature.None? && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_192_GCM_IV12_TAG16_HKDF_SHA256 ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 24 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_256 && d8.signature.None? && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_IV12_TAG16_HKDF_SHA256 ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 32 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_256 && d8.signature.None? && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_HKDF_SHA256_ECDSA_P256 ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 16 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_256 && d8.signature.ECDSA? && d8.signature.curve == Signature.ECDSAParams.ECDSA_P256 && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_192_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384 ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 24 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_384 && d8.signature.ECDSA? && d8.signature.curve == Signature.ECDSAParams.ECDSA_P384 && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384 ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 32 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_384 && d8.signature.ECDSA? && d8.signature.curve == Signature.ECDSAParams.ECDSA_P384 && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_HKDF_SHA512_COMMIT_KEY ==> d8.messageVersion == 2 && d8.encrypt.keyLength == 32 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_512 && d8.signature.None? && d8.commitment.HKDF?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_HKDF_SHA512_COMMIT_KEY_ECDSA_P384 ==> d8.messageVersion == 2 && d8.encrypt.keyLength == 32 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_512 && d8.signature.ECDSA? && d8.signature.curve == Signature.ECDSAParams.ECDSA_P384 && d8.commitment.HKDF?), "Test does not meet type constraints and should be removed";
var d9 : UTF8.ValidUTF8Bytes := [(97 as StandardLibrary.UInt.uint8), (119 as StandardLibrary.UInt.uint8), (115 as StandardLibrary.UInt.uint8), (45 as StandardLibrary.UInt.uint8), (99 as StandardLibrary.UInt.uint8), (114 as StandardLibrary.UInt.uint8), (121 as StandardLibrary.UInt.uint8), (112 as StandardLibrary.UInt.uint8), (116 as StandardLibrary.UInt.uint8), (111 as StandardLibrary.UInt.uint8), (45 as StandardLibrary.UInt.uint8), (112 as StandardLibrary.UInt.uint8), (117 as StandardLibrary.UInt.uint8), (98 as StandardLibrary.UInt.uint8), (108 as StandardLibrary.UInt.uint8), (105 as StandardLibrary.UInt.uint8), (99 as StandardLibrary.UInt.uint8), (45 as StandardLibrary.UInt.uint8), (107 as StandardLibrary.UInt.uint8), (101 as StandardLibrary.UInt.uint8), (121 as StandardLibrary.UInt.uint8)];
expect UTF8.ValidUTF8Seq(d9), "Test does not meet type constraints and should be removed";
var d10 : UTF8.ValidUTF8Bytes := [(215 as StandardLibrary.UInt.uint8), (128 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8)];
expect UTF8.ValidUTF8Seq(d10), "Test does not meet type constraints and should be removed";
var d11 : UTF8.ValidUTF8Bytes := [(219 as StandardLibrary.UInt.uint8), (136 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8)];
expect UTF8.ValidUTF8Seq(d11), "Test does not meet type constraints and should be removed";
var d12 : UTF8.ValidUTF8Bytes := [(218 as StandardLibrary.UInt.uint8), (187 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8)];
expect UTF8.ValidUTF8Seq(d12), "Test does not meet type constraints and should be removed";
var d13 : UTF8.ValidUTF8Bytes := [(219 as StandardLibrary.UInt.uint8), (139 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8)];
expect UTF8.ValidUTF8Seq(d13), "Test does not meet type constraints and should be removed";
var d14 : UTF8.ValidUTF8Bytes := [(222 as StandardLibrary.UInt.uint8), (165 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8)];
expect UTF8.ValidUTF8Seq(d14), "Test does not meet type constraints and should be removed";
var d15 : UTF8.ValidUTF8Bytes := [(197 as StandardLibrary.UInt.uint8), (178 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8)];
expect UTF8.ValidUTF8Seq(d15), "Test does not meet type constraints and should be removed";
var d16 : UTF8.ValidUTF8Bytes := [(216 as StandardLibrary.UInt.uint8), (146 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8)];
expect UTF8.ValidUTF8Seq(d16), "Test does not meet type constraints and should be removed";
var d17 : Aws.Crypto.EncryptionContext := map[d9 := d10, d11 := d12, d13 := d14, d15 := d16];
var r0 := MaterialProviders.DefaultCMM.InitializeDecryptionMaterials(d8, d17);
expect (d8.signature.None? <==> MaterialProviders.Materials.EC_PUBLIC_KEY_FIELD in d17) ==> r0.Failure?;
}
// Test MaterialProviders.DefaultCMM.InitializeDecryptionMaterials(block#1899987) covers block 1899982
// Test MaterialProviders.DefaultCMM.InitializeDecryptionMaterials(block#1899987) covers block 1899983
// Test MaterialProviders.DefaultCMM.InitializeDecryptionMaterials(block#1899987) covers block 1899985
// Test MaterialProviders.DefaultCMM.InitializeDecryptionMaterials(block#1899987) covers block 1899987
// Extracting the test for MaterialProviders.DefaultCMM.InitializeDecryptionMaterials(block#1899987) from the counterexample...
method {:test} test19() {
var d0 : Aws.Crypto.AlgorithmSuiteId := Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_NO_KDF;
var d1 : AESEncryption.AES_GCM := AESEncryption.AES_GCM.AES_GCM(keyLength:=32,tagLength:=16,ivLength:=12);
var d2 : HMAC.Digests := HMAC.Digests.SHA_512;
var d3 : MaterialProviders.AlgorithmSuites.KeyDerivationAlgorithm := MaterialProviders.AlgorithmSuites.DerivationAlgorithm.HKDF(hmac:=d2,saltLength:=32,inputKeyLength:=(32 as AESEncryption.KeyLength),outputKeyLength:=(32 as AESEncryption.KeyLength));
expect (true && d3.HKDF? ==> d3.inputKeyLength == d3.outputKeyLength && (d3.hmac == HMAC.Digests.SHA_512 ==> d3.inputKeyLength == 32)) && !d3.None?, "Test does not meet type constraints and should be removed";
var d4 : HMAC.Digests := HMAC.Digests.SHA_512;
var d5 : MaterialProviders.AlgorithmSuites.CommitmentDerivationAlgorithm := MaterialProviders.AlgorithmSuites.DerivationAlgorithm.HKDF(hmac:=d4,saltLength:=32,inputKeyLength:=(32 as AESEncryption.KeyLength),outputKeyLength:=(32 as AESEncryption.KeyLength));
expect (true && d5.HKDF? ==> d5.hmac.SHA_512? && d5.saltLength == 32 && d5.inputKeyLength == 32 && d5.outputKeyLength == 32) && !d5.IDENTITY?, "Test does not meet type constraints and should be removed";
var d6 : Signature.ECDSAParams := Signature.ECDSAParams.ECDSA_P384;
var d7 : MaterialProviders.AlgorithmSuites.SignatureAlgorithm := MaterialProviders.AlgorithmSuites.SignatureAlgorithm.ECDSA(curve:=d6);
var d8 : MaterialProviders.AlgorithmSuites.AlgorithmSuite := MaterialProviders.AlgorithmSuites.AlgorithmSuiteInfo.AlgorithmSuiteInfo(messageVersion:=72,id:=d0,encrypt:=d1,kdf:=d3,commitment:=d5,signature:=d7);
expect (d8.kdf.HKDF? ==> d8.kdf.outputKeyLength == d8.encrypt.keyLength) && (d8.signature.ECDSA? ==> d8.kdf.HKDF?) && (d8.commitment.HKDF? ==> d8.commitment.saltLength == 32 && d8.commitment == d8.kdf) && (d8.kdf.HKDF? && d8.commitment.None? ==> d8.kdf.saltLength == 0) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_NO_KDF ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 16 && d8.kdf.IDENTITY? && d8.signature.None? && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_192_GCM_IV12_TAG16_NO_KDF ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 24 && d8.kdf.IDENTITY? && d8.signature.None? && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_IV12_TAG16_NO_KDF ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 32 && d8.kdf.IDENTITY? && d8.signature.None? && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_HKDF_SHA256 ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 16 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_256 && d8.signature.None? && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_192_GCM_IV12_TAG16_HKDF_SHA256 ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 24 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_256 && d8.signature.None? && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_IV12_TAG16_HKDF_SHA256 ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 32 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_256 && d8.signature.None? && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_HKDF_SHA256_ECDSA_P256 ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 16 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_256 && d8.signature.ECDSA? && d8.signature.curve == Signature.ECDSAParams.ECDSA_P256 && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_192_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384 ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 24 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_384 && d8.signature.ECDSA? && d8.signature.curve == Signature.ECDSAParams.ECDSA_P384 && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384 ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 32 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_384 && d8.signature.ECDSA? && d8.signature.curve == Signature.ECDSAParams.ECDSA_P384 && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_HKDF_SHA512_COMMIT_KEY ==> d8.messageVersion == 2 && d8.encrypt.keyLength == 32 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_512 && d8.signature.None? && d8.commitment.HKDF?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_HKDF_SHA512_COMMIT_KEY_ECDSA_P384 ==> d8.messageVersion == 2 && d8.encrypt.keyLength == 32 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_512 && d8.signature.ECDSA? && d8.signature.curve == Signature.ECDSAParams.ECDSA_P384 && d8.commitment.HKDF?), "Test does not meet type constraints and should be removed";
var d9 : UTF8.ValidUTF8Bytes := [(97 as StandardLibrary.UInt.uint8), (119 as StandardLibrary.UInt.uint8), (115 as StandardLibrary.UInt.uint8), (45 as StandardLibrary.UInt.uint8), (99 as StandardLibrary.UInt.uint8), (114 as StandardLibrary.UInt.uint8), (121 as StandardLibrary.UInt.uint8), (112 as StandardLibrary.UInt.uint8), (116 as StandardLibrary.UInt.uint8), (111 as StandardLibrary.UInt.uint8), (45 as StandardLibrary.UInt.uint8), (112 as StandardLibrary.UInt.uint8), (117 as StandardLibrary.UInt.uint8), (98 as StandardLibrary.UInt.uint8), (108 as StandardLibrary.UInt.uint8), (105 as StandardLibrary.UInt.uint8), (99 as StandardLibrary.UInt.uint8), (45 as StandardLibrary.UInt.uint8), (107 as StandardLibrary.UInt.uint8), (101 as StandardLibrary.UInt.uint8), (121 as StandardLibrary.UInt.uint8)];
expect UTF8.ValidUTF8Seq(d9), "Test does not meet type constraints and should be removed";
var d10 : UTF8.ValidUTF8Bytes := [(216 as StandardLibrary.UInt.uint8), (146 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8)];
expect UTF8.ValidUTF8Seq(d10), "Test does not meet type constraints and should be removed";
var d11 : UTF8.ValidUTF8Bytes := [(218 as StandardLibrary.UInt.uint8), (187 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8)];
expect UTF8.ValidUTF8Seq(d11), "Test does not meet type constraints and should be removed";
var d12 : UTF8.ValidUTF8Bytes := [(214 as StandardLibrary.UInt.uint8), (150 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8)];
expect UTF8.ValidUTF8Seq(d12), "Test does not meet type constraints and should be removed";
var d13 : UTF8.ValidUTF8Bytes := [(222 as StandardLibrary.UInt.uint8), (165 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8)];
expect UTF8.ValidUTF8Seq(d13), "Test does not meet type constraints and should be removed";
var d14 : UTF8.ValidUTF8Bytes := [(197 as StandardLibrary.UInt.uint8), (178 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8)];
expect UTF8.ValidUTF8Seq(d14), "Test does not meet type constraints and should be removed";
var d15 : UTF8.ValidUTF8Bytes := [(219 as StandardLibrary.UInt.uint8), (136 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8)];
expect UTF8.ValidUTF8Seq(d15), "Test does not meet type constraints and should be removed";
var d16 : UTF8.ValidUTF8Bytes := [(219 as StandardLibrary.UInt.uint8), (139 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8), (0 as StandardLibrary.UInt.uint8)];
expect UTF8.ValidUTF8Seq(d16), "Test does not meet type constraints and should be removed";
var d17 : Aws.Crypto.EncryptionContext := map[d9 := d10, d11 := d12, d13 := d14, d15 := d16];
var r0 := MaterialProviders.DefaultCMM.InitializeDecryptionMaterials(d8, d17);
expect (d8.signature.None? <==> MaterialProviders.Materials.EC_PUBLIC_KEY_FIELD in d17) ==> r0.Failure?;
}
// Test MaterialProviders.DefaultCMM.InitializeDecryptionMaterials(block#1899984) covers block 1899982
// Test MaterialProviders.DefaultCMM.InitializeDecryptionMaterials(block#1899984) covers block 1899983
// Test MaterialProviders.DefaultCMM.InitializeDecryptionMaterials(block#1899984) covers block 1899984
// Extracting the test for MaterialProviders.DefaultCMM.InitializeDecryptionMaterials(block#1899984) from the counterexample...
method {:test} test20() {
var d0 : Aws.Crypto.AlgorithmSuiteId := Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_NO_KDF;
var d1 : AESEncryption.AES_GCM := AESEncryption.AES_GCM.AES_GCM(keyLength:=32,tagLength:=16,ivLength:=12);
var d2 : HMAC.Digests := HMAC.Digests.SHA_512;
var d3 : MaterialProviders.AlgorithmSuites.KeyDerivationAlgorithm := MaterialProviders.AlgorithmSuites.DerivationAlgorithm.HKDF(hmac:=d2,saltLength:=32,inputKeyLength:=(32 as AESEncryption.KeyLength),outputKeyLength:=(32 as AESEncryption.KeyLength));
expect (true && d3.HKDF? ==> d3.inputKeyLength == d3.outputKeyLength && (d3.hmac == HMAC.Digests.SHA_512 ==> d3.inputKeyLength == 32)) && !d3.None?, "Test does not meet type constraints and should be removed";
var d4 : HMAC.Digests := HMAC.Digests.SHA_512;
var d5 : MaterialProviders.AlgorithmSuites.CommitmentDerivationAlgorithm := MaterialProviders.AlgorithmSuites.DerivationAlgorithm.HKDF(hmac:=d4,saltLength:=32,inputKeyLength:=(32 as AESEncryption.KeyLength),outputKeyLength:=(32 as AESEncryption.KeyLength));
expect (true && d5.HKDF? ==> d5.hmac.SHA_512? && d5.saltLength == 32 && d5.inputKeyLength == 32 && d5.outputKeyLength == 32) && !d5.IDENTITY?, "Test does not meet type constraints and should be removed";
var d6 : Signature.ECDSAParams := Signature.ECDSAParams.ECDSA_P384;
var d7 : MaterialProviders.AlgorithmSuites.SignatureAlgorithm := MaterialProviders.AlgorithmSuites.SignatureAlgorithm.ECDSA(curve:=d6);
var d8 : MaterialProviders.AlgorithmSuites.AlgorithmSuite := MaterialProviders.AlgorithmSuites.AlgorithmSuiteInfo.AlgorithmSuiteInfo(messageVersion:=68,id:=d0,encrypt:=d1,kdf:=d3,commitment:=d5,signature:=d7);
expect (d8.kdf.HKDF? ==> d8.kdf.outputKeyLength == d8.encrypt.keyLength) && (d8.signature.ECDSA? ==> d8.kdf.HKDF?) && (d8.commitment.HKDF? ==> d8.commitment.saltLength == 32 && d8.commitment == d8.kdf) && (d8.kdf.HKDF? && d8.commitment.None? ==> d8.kdf.saltLength == 0) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_NO_KDF ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 16 && d8.kdf.IDENTITY? && d8.signature.None? && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_192_GCM_IV12_TAG16_NO_KDF ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 24 && d8.kdf.IDENTITY? && d8.signature.None? && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_IV12_TAG16_NO_KDF ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 32 && d8.kdf.IDENTITY? && d8.signature.None? && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_HKDF_SHA256 ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 16 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_256 && d8.signature.None? && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_192_GCM_IV12_TAG16_HKDF_SHA256 ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 24 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_256 && d8.signature.None? && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_IV12_TAG16_HKDF_SHA256 ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 32 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_256 && d8.signature.None? && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_128_GCM_IV12_TAG16_HKDF_SHA256_ECDSA_P256 ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 16 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_256 && d8.signature.ECDSA? && d8.signature.curve == Signature.ECDSAParams.ECDSA_P256 && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_192_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384 ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 24 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_384 && d8.signature.ECDSA? && d8.signature.curve == Signature.ECDSAParams.ECDSA_P384 && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384 ==> d8.messageVersion == 1 && d8.encrypt.keyLength == 32 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_384 && d8.signature.ECDSA? && d8.signature.curve == Signature.ECDSAParams.ECDSA_P384 && d8.commitment.None?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_HKDF_SHA512_COMMIT_KEY ==> d8.messageVersion == 2 && d8.encrypt.keyLength == 32 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_512 && d8.signature.None? && d8.commitment.HKDF?) && (d8.id == Aws.Crypto.AlgorithmSuiteId.ALG_AES_256_GCM_HKDF_SHA512_COMMIT_KEY_ECDSA_P384 ==> d8.messageVersion == 2 && d8.encrypt.keyLength == 32 && d8.kdf.HKDF? && d8.kdf.hmac == HMAC.Digests.SHA_512 && d8.signature.ECDSA? && d8.signature.curve == Signature.ECDSAParams.ECDSA_P384 && d8.commitment.HKDF?), "Test does not meet type constraints and should be removed";
var d9 : Aws.Crypto.EncryptionContext := map[];
var r0 := MaterialProviders.DefaultCMM.InitializeDecryptionMaterials(d8, d9);
expect (d8.signature.None? <==> MaterialProviders.Materials.EC_PUBLIC_KEY_FIELD in d9) ==> r0.Failure?;
}

method {:synthesize} getFreshAwsCryptoIKeyring()returns (o:Aws.Crypto.IKeyring) ensures fresh(o) 
method {:synthesize} getFreshMaterialProvidersDefaultCMMDefaultCMM(keyring:Aws.Crypto.IKeyring) returns (o:MaterialProviders.DefaultCMM.DefaultCMM) ensures fresh(o) ensures o.keyring==keyring
}
